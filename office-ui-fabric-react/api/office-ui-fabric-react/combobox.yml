### YamlMime:UniversalReference
items:
  - uid: office-ui-fabric-react.ComboBox
    name: ComboBox
    fullName: ComboBox
    langs:
      - typeScript
    type: class
    extends:
      - 'BaseComponent<IComboBoxProps, IComboBoxState> '
    package: office-ui-fabric-react
    children:
      - office-ui-fabric-react.ComboBox.(constructor)
      - office-ui-fabric-react.ComboBox.componentDidMount
      - office-ui-fabric-react.ComboBox.componentDidUpdate
      - office-ui-fabric-react.ComboBox.componentWillReceiveProps
      - office-ui-fabric-react.ComboBox.componentWillUnmount
      - office-ui-fabric-react.ComboBox.defaultProps
      - office-ui-fabric-react.ComboBox.dismissMenu
      - office-ui-fabric-react.ComboBox.focus
      - office-ui-fabric-react.ComboBox.render
  - uid: office-ui-fabric-react.ComboBox.(constructor)
    summary: Constructs a new instance of the `ComboBox` class
    name: (constructor)(props)
    fullName: (constructor)(props)
    langs:
      - typeScript
    type: constructor
    syntax:
      content: 'constructor(props: IComboBoxProps);'
      parameters:
        - id: props
          description: ''
          type:
            - office-ui-fabric-react.IComboBoxProps
  - uid: office-ui-fabric-react.ComboBox.componentDidMount
    name: componentDidMount()
    fullName: componentDidMount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'componentDidMount(): void;'
      return:
        type:
          - void
        description: ''
  - uid: office-ui-fabric-react.ComboBox.componentDidUpdate
    name: 'componentDidUpdate(prevProps, prevState)'
    fullName: 'componentDidUpdate(prevProps, prevState)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'componentDidUpdate(prevProps: IComboBoxProps, prevState: IComboBoxState): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: prevProps
          description: ''
          type:
            - office-ui-fabric-react.IComboBoxProps
        - id: prevState
          description: ''
          type:
            - office-ui-fabric-react.IComboBoxState
  - uid: office-ui-fabric-react.ComboBox.componentWillReceiveProps
    name: componentWillReceiveProps(newProps)
    fullName: componentWillReceiveProps(newProps)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'componentWillReceiveProps(newProps: IComboBoxProps): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: newProps
          description: ''
          type:
            - office-ui-fabric-react.IComboBoxProps
  - uid: office-ui-fabric-react.ComboBox.componentWillUnmount
    name: componentWillUnmount()
    fullName: componentWillUnmount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'componentWillUnmount(): void;'
      return:
        type:
          - void
        description: ''
  - uid: office-ui-fabric-react.ComboBox.defaultProps
    name: defaultProps
    fullName: defaultProps
    langs:
      - typeScript
    type: property
    syntax:
      content: 'static defaultProps: IComboBoxProps;'
      return:
        type:
          - office-ui-fabric-react.IComboBoxProps
  - uid: office-ui-fabric-react.ComboBox.dismissMenu
    summary: Close menu callout if it is open
    name: dismissMenu
    fullName: dismissMenu
    langs:
      - typeScript
    type: property
    syntax:
      content: 'dismissMenu: () => void;'
      return:
        type:
          - () => void
  - uid: office-ui-fabric-react.ComboBox.focus
    name: focus
    fullName: focus
    langs:
      - typeScript
    type: property
    syntax:
      content: 'focus: (shouldOpenOnFocus?: boolean | undefined, useFocusAsync?: boolean | undefined) => void;'
      return:
        type:
          - '(shouldOpenOnFocus?: boolean | undefined, useFocusAsync?: boolean | undefined) => void'
  - uid: office-ui-fabric-react.ComboBox.render
    name: render()
    fullName: render()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'render(): JSX.Element;'
      return:
        type:
          - JSX.Element
        description: ''
