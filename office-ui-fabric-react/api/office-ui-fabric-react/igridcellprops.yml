### YamlMime:UniversalReference
items:
  - uid: office-ui-fabric-react.IGridCellProps
    name: IGridCellProps
    fullName: IGridCellProps
    langs:
      - typeScript
    type: interface
    package: office-ui-fabric-react
    children:
      - office-ui-fabric-react.IGridCellProps.cellDisabledStyle
      - office-ui-fabric-react.IGridCellProps.cellIsSelectedStyle
      - office-ui-fabric-react.IGridCellProps.className
      - office-ui-fabric-react.IGridCellProps.disabled
      - office-ui-fabric-react.IGridCellProps.getClassNames
      - office-ui-fabric-react.IGridCellProps.id
      - office-ui-fabric-react.IGridCellProps.index
      - office-ui-fabric-react.IGridCellProps.item
      - office-ui-fabric-react.IGridCellProps.label
      - office-ui-fabric-react.IGridCellProps.onClick
      - office-ui-fabric-react.IGridCellProps.onFocus
      - office-ui-fabric-react.IGridCellProps.onHover
      - office-ui-fabric-react.IGridCellProps.onKeyDown
      - office-ui-fabric-react.IGridCellProps.onMouseEnter
      - office-ui-fabric-react.IGridCellProps.onMouseLeave
      - office-ui-fabric-react.IGridCellProps.onMouseMove
      - office-ui-fabric-react.IGridCellProps.onRenderItem
      - office-ui-fabric-react.IGridCellProps.onWheel
      - office-ui-fabric-react.IGridCellProps.role
      - office-ui-fabric-react.IGridCellProps.selected
  - uid: office-ui-fabric-react.IGridCellProps.cellDisabledStyle
    summary: 'Optional, the CSS class used for when the cell is disabled'
    name: cellDisabledStyle
    fullName: cellDisabledStyle
    langs:
      - typeScript
    type: property
    syntax:
      content: 'cellDisabledStyle?: string[];'
      return:
        type:
          - 'string[]'
  - uid: office-ui-fabric-react.IGridCellProps.cellIsSelectedStyle
    summary: 'Optional, the CSS class used for when the cell is selected'
    name: cellIsSelectedStyle
    fullName: cellIsSelectedStyle
    langs:
      - typeScript
    type: property
    syntax:
      content: 'cellIsSelectedStyle?: string[];'
      return:
        type:
          - 'string[]'
  - uid: office-ui-fabric-react.IGridCellProps.className
    summary: 'Optional, className(s) to apply'
    name: className
    fullName: className
    langs:
      - typeScript
    type: property
    syntax:
      content: 'className?: string;'
      return:
        type:
          - string
  - uid: office-ui-fabric-react.IGridCellProps.disabled
    summary: 'Optional, if the this option should be diabled'
    name: disabled
    fullName: disabled
    langs:
      - typeScript
    type: property
    syntax:
      content: 'disabled?: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.IGridCellProps.getClassNames
    summary: >-
      Method to provide the classnames to style a button. The default value for this prop is the getClassnames func
      defined in BaseButton.classnames.
    name: getClassNames
    fullName: getClassNames
    langs:
      - typeScript
    type: property
    syntax:
      content: >-
        getClassNames?: (theme: ITheme, className: string, variantClassName: string, iconClassName: string | undefined,
        menuIconClassName: string | undefined, disabled: boolean, checked: boolean, expanded: boolean, isSplit: boolean
        | undefined) => IButtonClassNames;
      return:
        type:
          - >-
            (theme: ITheme, className: string, variantClassName: string, iconClassName: string | undefined,
            menuIconClassName: string | undefined, disabled: boolean, checked: boolean, expanded: boolean, isSplit:
            boolean | undefined) => IButtonClassNames
  - uid: office-ui-fabric-react.IGridCellProps.id
    summary: Arbitrary unique string associated with this option
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'id: string;'
      return:
        type:
          - string
  - uid: office-ui-fabric-react.IGridCellProps.index
    summary: Index for this option
    name: index
    fullName: index
    langs:
      - typeScript
    type: property
    syntax:
      content: 'index?: number;'
      return:
        type:
          - number
  - uid: office-ui-fabric-react.IGridCellProps.item
    summary: The option that will be made available to the user
    name: item
    fullName: item
    langs:
      - typeScript
    type: property
    syntax:
      content: 'item: T;'
      return:
        type:
          - T
  - uid: office-ui-fabric-react.IGridCellProps.label
    summary: 'The label for this item. Visible text if this item is a header, tooltip if is this item is normal'
    name: label
    fullName: label
    langs:
      - typeScript
    type: property
    syntax:
      content: 'label?: string;'
      return:
        type:
          - string
  - uid: office-ui-fabric-react.IGridCellProps.onClick
    summary: The on click handler
    name: onClick
    fullName: onClick
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onClick?: (item: T) => void;'
      return:
        type:
          - '(item: T) => void'
  - uid: office-ui-fabric-react.IGridCellProps.onFocus
    summary: 'Optional, the onFocus handler'
    name: onFocus
    fullName: onFocus
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onFocus?: (item: T) => void;'
      return:
        type:
          - '(item: T) => void'
  - uid: office-ui-fabric-react.IGridCellProps.onHover
    summary: 'Optional, the onHover handler'
    name: onHover
    fullName: onHover
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onHover?: (item?: T) => void;'
      return:
        type:
          - '(item?: T) => void'
  - uid: office-ui-fabric-react.IGridCellProps.onKeyDown
    summary: 'Optional, onkeydown handler'
    name: onKeyDown
    fullName: onKeyDown
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onKeyDown?: (ev: React.KeyboardEvent<HTMLButtonElement>) => void;'
      return:
        type:
          - '(ev: React.KeyboardEvent<HTMLButtonElement>) => void'
  - uid: office-ui-fabric-react.IGridCellProps.onMouseEnter
    summary: 'Optional, mouseEnter handler.'
    name: onMouseEnter
    fullName: onMouseEnter
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onMouseEnter?: (ev: React.MouseEvent<HTMLButtonElement>) => boolean;'
      return:
        type:
          - '(ev: React.MouseEvent<HTMLButtonElement>) => boolean'
  - uid: office-ui-fabric-react.IGridCellProps.onMouseLeave
    summary: 'Optional, mouseLeave handler'
    name: onMouseLeave
    fullName: onMouseLeave
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onMouseLeave?: (ev: React.MouseEvent<HTMLButtonElement>) => void;'
      return:
        type:
          - '(ev: React.MouseEvent<HTMLButtonElement>) => void'
  - uid: office-ui-fabric-react.IGridCellProps.onMouseMove
    summary: 'Optional, mouseMove handler'
    name: onMouseMove
    fullName: onMouseMove
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onMouseMove?: (ev: React.MouseEvent<HTMLButtonElement>) => boolean;'
      return:
        type:
          - '(ev: React.MouseEvent<HTMLButtonElement>) => boolean'
  - uid: office-ui-fabric-react.IGridCellProps.onRenderItem
    summary: The render callback to handle rendering the item
    name: onRenderItem
    fullName: onRenderItem
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onRenderItem: (item: T) => JSX.Element;'
      return:
        type:
          - '(item: T) => JSX.Element'
  - uid: office-ui-fabric-react.IGridCellProps.onWheel
    summary: 'Optional, onWheel handler'
    name: onWheel
    fullName: onWheel
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onWheel?: (ev: React.MouseEvent<HTMLButtonElement>) => void;'
      return:
        type:
          - '(ev: React.MouseEvent<HTMLButtonElement>) => void'
  - uid: office-ui-fabric-react.IGridCellProps.role
    summary: The accessible role for this option
    name: role
    fullName: role
    langs:
      - typeScript
    type: property
    syntax:
      content: 'role?: string;'
      return:
        type:
          - string
  - uid: office-ui-fabric-react.IGridCellProps.selected
    summary: 'Optional, if the cell is currently selected'
    name: selected
    fullName: selected
    langs:
      - typeScript
    type: property
    syntax:
      content: 'selected?: boolean;'
      return:
        type:
          - boolean
