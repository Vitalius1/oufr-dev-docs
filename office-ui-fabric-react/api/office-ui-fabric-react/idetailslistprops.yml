### YamlMime:UniversalReference
items:
  - uid: office-ui-fabric-react.IDetailsListProps
    name: IDetailsListProps
    fullName: IDetailsListProps
    langs:
      - typeScript
    type: interface
    extends:
      - IBaseProps<IDetailsList>
      - 'IWithViewportProps '
    package: office-ui-fabric-react
    children:
      - office-ui-fabric-react.IDetailsListProps.ariaLabel
      - office-ui-fabric-react.IDetailsListProps.ariaLabelForGrid
      - office-ui-fabric-react.IDetailsListProps.ariaLabelForListHeader
      - office-ui-fabric-react.IDetailsListProps.ariaLabelForSelectAllCheckbox
      - office-ui-fabric-react.IDetailsListProps.ariaLabelForSelectionColumn
      - office-ui-fabric-react.IDetailsListProps.cellStyleProps
      - office-ui-fabric-react.IDetailsListProps.checkboxCellClassName
      - office-ui-fabric-react.IDetailsListProps.checkboxVisibility
      - office-ui-fabric-react.IDetailsListProps.checkButtonAriaLabel
      - office-ui-fabric-react.IDetailsListProps.className
      - office-ui-fabric-react.IDetailsListProps.columnReorderOptions
      - office-ui-fabric-react.IDetailsListProps.columns
      - office-ui-fabric-react.IDetailsListProps.compact
      - office-ui-fabric-react.IDetailsListProps.componentRef
      - office-ui-fabric-react.IDetailsListProps.constrainMode
      - office-ui-fabric-react.IDetailsListProps.disableSelectionZone
      - office-ui-fabric-react.IDetailsListProps.dragDropEvents
      - office-ui-fabric-react.IDetailsListProps.enableShimmer
      - office-ui-fabric-react.IDetailsListProps.enterModalSelectionOnTouch
      - office-ui-fabric-react.IDetailsListProps.getGroupHeight
      - office-ui-fabric-react.IDetailsListProps.getKey
      - office-ui-fabric-react.IDetailsListProps.getRowAriaDescribedBy
      - office-ui-fabric-react.IDetailsListProps.getRowAriaLabel
      - office-ui-fabric-react.IDetailsListProps.groupProps
      - office-ui-fabric-react.IDetailsListProps.groups
      - office-ui-fabric-react.IDetailsListProps.indentWidth
      - office-ui-fabric-react.IDetailsListProps.initialFocusedIndex
      - office-ui-fabric-react.IDetailsListProps.isHeaderVisible
      - office-ui-fabric-react.IDetailsListProps.items
      - office-ui-fabric-react.IDetailsListProps.layoutMode
      - office-ui-fabric-react.IDetailsListProps.listProps
      - office-ui-fabric-react.IDetailsListProps.minimumPixelsForDrag
      - office-ui-fabric-react.IDetailsListProps.onActiveItemChanged
      - office-ui-fabric-react.IDetailsListProps.onColumnHeaderClick
      - office-ui-fabric-react.IDetailsListProps.onColumnHeaderContextMenu
      - office-ui-fabric-react.IDetailsListProps.onColumnResize
      - office-ui-fabric-react.IDetailsListProps.onDidUpdate
      - office-ui-fabric-react.IDetailsListProps.onItemContextMenu
      - office-ui-fabric-react.IDetailsListProps.onItemInvoked
      - office-ui-fabric-react.IDetailsListProps.onRenderCheckbox
      - office-ui-fabric-react.IDetailsListProps.onRenderDetailsFooter
      - office-ui-fabric-react.IDetailsListProps.onRenderDetailsHeader
      - office-ui-fabric-react.IDetailsListProps.onRenderItemColumn
      - office-ui-fabric-react.IDetailsListProps.onRenderMissingItem
      - office-ui-fabric-react.IDetailsListProps.onRenderRow
      - office-ui-fabric-react.IDetailsListProps.onRowDidMount
      - office-ui-fabric-react.IDetailsListProps.onRowWillUnmount
      - office-ui-fabric-react.IDetailsListProps.onShouldVirtualize
      - office-ui-fabric-react.IDetailsListProps.rowElementEventMap
      - office-ui-fabric-react.IDetailsListProps.selection
      - office-ui-fabric-react.IDetailsListProps.selectionMode
      - office-ui-fabric-react.IDetailsListProps.selectionPreservedOnEmptyClick
      - office-ui-fabric-react.IDetailsListProps.selectionZoneProps
      - office-ui-fabric-react.IDetailsListProps.setKey
      - office-ui-fabric-react.IDetailsListProps.shouldApplyApplicationRole
      - office-ui-fabric-react.IDetailsListProps.styles
      - office-ui-fabric-react.IDetailsListProps.theme
      - office-ui-fabric-react.IDetailsListProps.usePageCache
      - office-ui-fabric-react.IDetailsListProps.useReducedRowRenderer
      - office-ui-fabric-react.IDetailsListProps.viewport
  - uid: office-ui-fabric-react.IDetailsListProps.ariaLabel
    summary: A text summary of the table set via aria-label.
    name: ariaLabel
    fullName: ariaLabel
    langs:
      - typeScript
    type: property
    syntax:
      content: 'ariaLabel?: string;'
      return:
        type:
          - string
  - uid: office-ui-fabric-react.IDetailsListProps.ariaLabelForGrid
    summary: Aria label for grid in details list.
    name: ariaLabelForGrid
    fullName: ariaLabelForGrid
    langs:
      - typeScript
    type: property
    syntax:
      content: 'ariaLabelForGrid?: string;'
      return:
        type:
          - string
  - uid: office-ui-fabric-react.IDetailsListProps.ariaLabelForListHeader
    summary: The aria-label attribute to stamp out on the list header
    name: ariaLabelForListHeader
    fullName: ariaLabelForListHeader
    langs:
      - typeScript
    type: property
    syntax:
      content: 'ariaLabelForListHeader?: string;'
      return:
        type:
          - string
  - uid: office-ui-fabric-react.IDetailsListProps.ariaLabelForSelectAllCheckbox
    summary: The aria-label attribute to stamp out on select all checkbox for the list
    name: ariaLabelForSelectAllCheckbox
    fullName: ariaLabelForSelectAllCheckbox
    langs:
      - typeScript
    type: property
    syntax:
      content: 'ariaLabelForSelectAllCheckbox?: string;'
      return:
        type:
          - string
  - uid: office-ui-fabric-react.IDetailsListProps.ariaLabelForSelectionColumn
    summary: 'An ARIA label for the name of the selection column, for localization.'
    name: ariaLabelForSelectionColumn
    fullName: ariaLabelForSelectionColumn
    langs:
      - typeScript
    type: property
    syntax:
      content: 'ariaLabelForSelectionColumn?: string;'
      return:
        type:
          - string
  - uid: office-ui-fabric-react.IDetailsListProps.cellStyleProps
    summary: >-
      Props impacting the render style of cells. Since these have an impact on calculated column widths, they are
      handled separately from normal theme styling, but they are passed to the styling system.
    name: cellStyleProps
    fullName: cellStyleProps
    langs:
      - typeScript
    type: property
    syntax:
      content: 'cellStyleProps?: ICellStyleProps;'
      return:
        type:
          - office-ui-fabric-react.ICellStyleProps
  - uid: office-ui-fabric-react.IDetailsListProps.checkboxCellClassName
    summary: Optional class name to add to the cell of a checkbox
    name: checkboxCellClassName
    fullName: checkboxCellClassName
    langs:
      - typeScript
    type: property
    syntax:
      content: 'checkboxCellClassName?: string;'
      return:
        type:
          - string
  - uid: office-ui-fabric-react.IDetailsListProps.checkboxVisibility
    summary: Controls the visibility of selection check box.
    name: checkboxVisibility
    fullName: checkboxVisibility
    langs:
      - typeScript
    type: property
    syntax:
      content: 'checkboxVisibility?: CheckboxVisibility;'
      return:
        type:
          - office-ui-fabric-react.CheckboxVisibility
  - uid: office-ui-fabric-react.IDetailsListProps.checkButtonAriaLabel
    summary: Check button aria label for details list.
    name: checkButtonAriaLabel
    fullName: checkButtonAriaLabel
    langs:
      - typeScript
    type: property
    syntax:
      content: 'checkButtonAriaLabel?: string;'
      return:
        type:
          - string
  - uid: office-ui-fabric-react.IDetailsListProps.className
    summary: Optional class name to add to the root element.
    name: className
    fullName: className
    langs:
      - typeScript
    type: property
    syntax:
      content: 'className?: string;'
      return:
        type:
          - string
  - uid: office-ui-fabric-react.IDetailsListProps.columnReorderOptions
    summary: Options for column re-order using drag and drop
    name: columnReorderOptions
    fullName: columnReorderOptions
    langs:
      - typeScript
    type: property
    syntax:
      content: 'columnReorderOptions?: IColumnReorderOptions;'
      return:
        type:
          - office-ui-fabric-react.IColumnReorderOptions
  - uid: office-ui-fabric-react.IDetailsListProps.columns
    summary: 'Given column defitions. If none are provided, default columns will be created based on the item''s properties.'
    name: columns
    fullName: columns
    langs:
      - typeScript
    type: property
    syntax:
      content: 'columns?: IColumn[];'
      return:
        type:
          - 'IColumn[]'
  - uid: office-ui-fabric-react.IDetailsListProps.compact
    summary: Boolean value to indicate if the component should render in compact mode. Set to false by default
    name: compact
    fullName: compact
    langs:
      - typeScript
    type: property
    syntax:
      content: 'compact?: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.IDetailsListProps.componentRef
    summary: >-
      Optional callback to access the IDetailsList interface. Use this instead of ref for accessing the public methods
      and properties of the component.
    name: componentRef
    fullName: componentRef
    langs:
      - typeScript
    type: property
    syntax:
      content: 'componentRef?: IRefObject<IDetailsList>;'
      return:
        type:
          - IRefObject<IDetailsList>
  - uid: office-ui-fabric-react.IDetailsListProps.constrainMode
    summary: Controls how the list contrains overflow.
    name: constrainMode
    fullName: constrainMode
    langs:
      - typeScript
    type: property
    syntax:
      content: 'constrainMode?: ConstrainMode;'
      return:
        type:
          - office-ui-fabric-react.ConstrainMode
  - uid: office-ui-fabric-react.IDetailsListProps.disableSelectionZone
    summary: 'Whether or not to disable the built-in SelectionZone, so the host component can provide its own.'
    name: disableSelectionZone
    fullName: disableSelectionZone
    langs:
      - typeScript
    type: property
    syntax:
      content: 'disableSelectionZone?: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.IDetailsListProps.dragDropEvents
    summary: Map of callback functions related to row drag and drop functionality.
    name: dragDropEvents
    fullName: dragDropEvents
    langs:
      - typeScript
    type: property
    syntax:
      content: 'dragDropEvents?: IDragDropEvents;'
      return:
        type:
          - IDragDropEvents
  - uid: office-ui-fabric-react.IDetailsListProps.enableShimmer
    summary: 'If set to true and we provide an empty array, it will render 10 lines of whatever provided in onRenderMissingItem.'
    deprecated:
      content: >-
        Use `ShimmeredDetailsList` pass-through component instead which supports this prop. Will be removed in Fabric
        7.0
    name: enableShimmer
    fullName: enableShimmer
    langs:
      - typeScript
    type: property
    syntax:
      content: 'enableShimmer?: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.IDetailsListProps.enterModalSelectionOnTouch
    summary: Whether or not the selection zone should enter modal state on touch.
    name: enterModalSelectionOnTouch
    fullName: enterModalSelectionOnTouch
    langs:
      - typeScript
    type: property
    syntax:
      content: 'enterModalSelectionOnTouch?: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.IDetailsListProps.getGroupHeight
    summary: Optional function to override default group height calculation used by list virtualization.
    name: getGroupHeight
    fullName: getGroupHeight
    langs:
      - typeScript
    type: property
    syntax:
      content: 'getGroupHeight?: IGroupedListProps[''getGroupHeight''];'
      return:
        type:
          - 'IGroupedListProps[''getGroupHeight'']'
  - uid: office-ui-fabric-react.IDetailsListProps.getKey
    summary: 'Optional callback to get the item key, to be used in the selection and on render.'
    name: getKey
    fullName: getKey
    langs:
      - typeScript
    type: property
    syntax:
      content: 'getKey?: (item: any, index?: number) => string;'
      return:
        type:
          - '(item: any, index?: number) => string'
  - uid: office-ui-fabric-react.IDetailsListProps.getRowAriaDescribedBy
    summary: >-
      Optional callback to get the aria-describedby IDs (space separated strings) of the elements that describe the
      item.
    name: getRowAriaDescribedBy
    fullName: getRowAriaDescribedBy
    langs:
      - typeScript
    type: property
    syntax:
      content: 'getRowAriaDescribedBy?: (item: any) => string;'
      return:
        type:
          - '(item: any) => string'
  - uid: office-ui-fabric-react.IDetailsListProps.getRowAriaLabel
    summary: Optional callback to get the aria-label string for a given item.
    name: getRowAriaLabel
    fullName: getRowAriaLabel
    langs:
      - typeScript
    type: property
    syntax:
      content: 'getRowAriaLabel?: (item: any) => string;'
      return:
        type:
          - '(item: any) => string'
  - uid: office-ui-fabric-react.IDetailsListProps.groupProps
    summary: >-
      Optional override properties to render groups. The definition for IGroupRenderProps can be found under the
      GroupedList component.
    name: groupProps
    fullName: groupProps
    langs:
      - typeScript
    type: property
    syntax:
      content: 'groupProps?: IDetailsGroupRenderProps;'
      return:
        type:
          - office-ui-fabric-react.IDetailsGroupRenderProps
  - uid: office-ui-fabric-react.IDetailsListProps.groups
    summary: Optional grouping instructions. The definition for IGroup can be found under the GroupedList component.
    name: groups
    fullName: groups
    langs:
      - typeScript
    type: property
    syntax:
      content: 'groups?: IGroup[];'
      return:
        type:
          - 'IGroup[]'
  - uid: office-ui-fabric-react.IDetailsListProps.indentWidth
    summary: Optional override for the indent width used for group nesting.
    name: indentWidth
    fullName: indentWidth
    langs:
      - typeScript
    type: property
    syntax:
      content: 'indentWidth?: number;'
      return:
        type:
          - number
  - uid: office-ui-fabric-react.IDetailsListProps.initialFocusedIndex
    summary: Optional default focused index to set focus to once the items have rendered and the index exists.
    name: initialFocusedIndex
    fullName: initialFocusedIndex
    langs:
      - typeScript
    type: property
    syntax:
      content: 'initialFocusedIndex?: number;'
      return:
        type:
          - number
  - uid: office-ui-fabric-react.IDetailsListProps.isHeaderVisible
    summary: Controls the visibility of the details header.
    name: isHeaderVisible
    fullName: isHeaderVisible
    langs:
      - typeScript
    type: property
    syntax:
      content: 'isHeaderVisible?: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.IDetailsListProps.items
    summary: The items to render.
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'items: any[];'
      return:
        type:
          - 'any[]'
  - uid: office-ui-fabric-react.IDetailsListProps.layoutMode
    summary: Controls how the columns are adjusted.
    name: layoutMode
    fullName: layoutMode
    langs:
      - typeScript
    type: property
    syntax:
      content: 'layoutMode?: DetailsListLayoutMode;'
      return:
        type:
          - office-ui-fabric-react.DetailsListLayoutMode
  - uid: office-ui-fabric-react.IDetailsListProps.listProps
    summary: Optional properties to pass through to the list components being rendered.
    name: listProps
    fullName: listProps
    langs:
      - typeScript
    type: property
    syntax:
      content: 'listProps?: IListProps;'
      return:
        type:
          - office-ui-fabric-react.IListProps
  - uid: office-ui-fabric-react.IDetailsListProps.minimumPixelsForDrag
    summary: The minimum mouse move distance to interpret the action as drag event.
    name: minimumPixelsForDrag
    fullName: minimumPixelsForDrag
    langs:
      - typeScript
    type: property
    syntax:
      content: 'minimumPixelsForDrag?: number;'
      return:
        type:
          - number
  - uid: office-ui-fabric-react.IDetailsListProps.onActiveItemChanged
    summary: >-
      Callback for when an item in the list becomes active by clicking anywhere inside the row or navigating to it with
      keyboard.
    name: onActiveItemChanged
    fullName: onActiveItemChanged
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onActiveItemChanged?: (item?: any, index?: number, ev?: React.FocusEvent<HTMLElement>) => void;'
      return:
        type:
          - '(item?: any, index?: number, ev?: React.FocusEvent<HTMLElement>) => void'
  - uid: office-ui-fabric-react.IDetailsListProps.onColumnHeaderClick
    summary: Callback for when the user clicks on the column header.
    name: onColumnHeaderClick
    fullName: onColumnHeaderClick
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onColumnHeaderClick?: (ev?: React.MouseEvent<HTMLElement>, column?: IColumn) => void;'
      return:
        type:
          - '(ev?: React.MouseEvent<HTMLElement>, column?: IColumn) => void'
  - uid: office-ui-fabric-react.IDetailsListProps.onColumnHeaderContextMenu
    summary: Callback for when the user asks for a contextual menu (usually via right click) from a column header.
    name: onColumnHeaderContextMenu
    fullName: onColumnHeaderContextMenu
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onColumnHeaderContextMenu?: (column?: IColumn, ev?: React.MouseEvent<HTMLElement>) => void;'
      return:
        type:
          - '(column?: IColumn, ev?: React.MouseEvent<HTMLElement>) => void'
  - uid: office-ui-fabric-react.IDetailsListProps.onColumnResize
    summary: Callback fired on column resize
    name: onColumnResize
    fullName: onColumnResize
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onColumnResize?: (column?: IColumn, newWidth?: number, columnIndex?: number) => void;'
      return:
        type:
          - '(column?: IColumn, newWidth?: number, columnIndex?: number) => void'
  - uid: office-ui-fabric-react.IDetailsListProps.onDidUpdate
    summary: Callback for when the details list has been updated. Useful for telemetry tracking externally.
    name: onDidUpdate
    fullName: onDidUpdate
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onDidUpdate?: (detailsList?: DetailsListBase) => void;'
      return:
        type:
          - '(detailsList?: DetailsListBase) => void'
  - uid: office-ui-fabric-react.IDetailsListProps.onItemContextMenu
    summary: >-
      Callback for when the context menu of an item has been accessed. If undefined or false are returned,
      ev.preventDefault() will be called.
    name: onItemContextMenu
    fullName: onItemContextMenu
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onItemContextMenu?: (item?: any, index?: number, ev?: Event) => void | boolean;'
      return:
        type:
          - '(item?: any, index?: number, ev?: Event) => void | boolean'
  - uid: office-ui-fabric-react.IDetailsListProps.onItemInvoked
    summary: Callback for when a given row has been invoked (by pressing enter while it is selected.)
    name: onItemInvoked
    fullName: onItemInvoked
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onItemInvoked?: (item?: any, index?: number, ev?: Event) => void;'
      return:
        type:
          - '(item?: any, index?: number, ev?: Event) => void'
  - uid: office-ui-fabric-react.IDetailsListProps.onRenderCheckbox
    summary: 'If provided, can be used to render a custom checkbox'
    name: onRenderCheckbox
    fullName: onRenderCheckbox
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onRenderCheckbox?: IRenderFunction<IDetailsListCheckboxProps>;'
      return:
        type:
          - IRenderFunction<IDetailsListCheckboxProps>
  - uid: office-ui-fabric-react.IDetailsListProps.onRenderDetailsFooter
    summary: An override to render the details footer.
    name: onRenderDetailsFooter
    fullName: onRenderDetailsFooter
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onRenderDetailsFooter?: IRenderFunction<IDetailsFooterProps>;'
      return:
        type:
          - IRenderFunction<IDetailsFooterProps>
  - uid: office-ui-fabric-react.IDetailsListProps.onRenderDetailsHeader
    summary: An override to render the details header.
    name: onRenderDetailsHeader
    fullName: onRenderDetailsHeader
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onRenderDetailsHeader?: IRenderFunction<IDetailsHeaderProps>;'
      return:
        type:
          - IRenderFunction<IDetailsHeaderProps>
  - uid: office-ui-fabric-react.IDetailsListProps.onRenderItemColumn
    summary: >-
      If provided, will be the "default" item column renderer method. This affects cells within the rows; not the rows
      themselves. If a column definition provides its own onRender method, that will be used instead of this.
    name: onRenderItemColumn
    fullName: onRenderItemColumn
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onRenderItemColumn?: (item?: any, index?: number, column?: IColumn) => React.ReactNode;'
      return:
        type:
          - '(item?: any, index?: number, column?: IColumn) => React.ReactNode'
  - uid: office-ui-fabric-react.IDetailsListProps.onRenderMissingItem
    summary: Callback for what to render when the item is missing.
    name: onRenderMissingItem
    fullName: onRenderMissingItem
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onRenderMissingItem?: (index?: number, rowProps?: IDetailsRowProps) => React.ReactNode;'
      return:
        type:
          - '(index?: number, rowProps?: IDetailsRowProps) => React.ReactNode'
  - uid: office-ui-fabric-react.IDetailsListProps.onRenderRow
    summary: 'If provided, will allow the caller to override the default row rendering.'
    name: onRenderRow
    fullName: onRenderRow
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onRenderRow?: IRenderFunction<IDetailsRowProps>;'
      return:
        type:
          - IRenderFunction<IDetailsRowProps>
  - uid: office-ui-fabric-react.IDetailsListProps.onRowDidMount
    summary: Callback for when a given row has been mounted. Useful for identifying when a row has been rendered on the page.
    name: onRowDidMount
    fullName: onRowDidMount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onRowDidMount?: (item?: any, index?: number) => void;'
      return:
        type:
          - '(item?: any, index?: number) => void'
  - uid: office-ui-fabric-react.IDetailsListProps.onRowWillUnmount
    summary: >-
      Callback for when a given row has been unmounted. Useful for identifying when a row has been removed from the
      page.
    name: onRowWillUnmount
    fullName: onRowWillUnmount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onRowWillUnmount?: (item?: any, index?: number) => void;'
      return:
        type:
          - '(item?: any, index?: number) => void'
  - uid: office-ui-fabric-react.IDetailsListProps.onShouldVirtualize
    summary: >-
      Optional callback to determine whether the list should be rendered in full, or virtualized. Virtualization will
      add and remove pages of items as the user scrolls them into the visible range. This benefits larger list scenarios
      by reducing the DOM on the screen, but can negatively affect performance for smaller lists. The default
      implementation will virtualize when this callback is not provided.
    name: onShouldVirtualize
    fullName: onShouldVirtualize
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onShouldVirtualize?: (props: IListProps) => boolean;'
      return:
        type:
          - '(props: IListProps) => boolean'
  - uid: office-ui-fabric-react.IDetailsListProps.rowElementEventMap
    summary: Event names and corresponding callbacks that will be registered to rendered row elements.
    name: rowElementEventMap
    fullName: rowElementEventMap
    langs:
      - typeScript
    type: property
    syntax:
      content: |-
        rowElementEventMap?: {
                eventName: string;
                callback: (context: IDragDropContext, event?: any) => void;
            }[];
      return:
        type:
          - |-
            {
                    eventName: string;
                    callback: (context: IDragDropContext, event?: any) => void;
                }[]
  - uid: office-ui-fabric-react.IDetailsListProps.selection
    summary: Optional selection model to track selection state.
    name: selection
    fullName: selection
    langs:
      - typeScript
    type: property
    syntax:
      content: 'selection?: ISelection;'
      return:
        type:
          - office-ui-fabric-react.ISelection
  - uid: office-ui-fabric-react.IDetailsListProps.selectionMode
    summary: 'Controls how/if the details list manages selection. Options include none, single, multiple'
    name: selectionMode
    fullName: selectionMode
    langs:
      - typeScript
    type: property
    syntax:
      content: 'selectionMode?: SelectionMode;'
      return:
        type:
          - office-ui-fabric-react.SelectionMode
  - uid: office-ui-fabric-react.IDetailsListProps.selectionPreservedOnEmptyClick
    summary: >-
      By default, selection is cleared when clicking on an empty (non-focusable) section of the screen. Setting this
      value to true overrides that behavior and maintains selection.
    name: selectionPreservedOnEmptyClick
    fullName: selectionPreservedOnEmptyClick
    langs:
      - typeScript
    type: property
    syntax:
      content: 'selectionPreservedOnEmptyClick?: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.IDetailsListProps.selectionZoneProps
    summary: Addition props to pass through to the selection zone created by default.
    name: selectionZoneProps
    fullName: selectionZoneProps
    langs:
      - typeScript
    type: property
    syntax:
      content: 'selectionZoneProps?: ISelectionZoneProps;'
      return:
        type:
          - office-ui-fabric-react.ISelectionZoneProps
  - uid: office-ui-fabric-react.IDetailsListProps.setKey
    summary: 'A key that uniquely identifies the given items. If provided, the selection will be reset when the key changes.'
    name: setKey
    fullName: setKey
    langs:
      - typeScript
    type: property
    syntax:
      content: 'setKey?: string;'
      return:
        type:
          - string
  - uid: office-ui-fabric-react.IDetailsListProps.shouldApplyApplicationRole
    summary: Boolean value to indicate if the role application should be applied on details list. Set to false by default
    name: shouldApplyApplicationRole
    fullName: shouldApplyApplicationRole
    langs:
      - typeScript
    type: property
    syntax:
      content: 'shouldApplyApplicationRole?: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.IDetailsListProps.styles
    summary: Style function to be passed in to override the themed or default styles
    name: styles
    fullName: styles
    langs:
      - typeScript
    type: property
    syntax:
      content: 'styles?: IStyleFunctionOrObject<IDetailsListStyleProps, IDetailsListStyles>;'
      return:
        type:
          - 'IStyleFunctionOrObject<IDetailsListStyleProps, IDetailsListStyles>'
  - uid: office-ui-fabric-react.IDetailsListProps.theme
    summary: Theme provided by the Higher Order Component
    name: theme
    fullName: theme
    langs:
      - typeScript
    type: property
    syntax:
      content: 'theme?: ITheme;'
      return:
        type:
          - styling.ITheme
  - uid: office-ui-fabric-react.IDetailsListProps.usePageCache
    summary: >-
      Boolean value to enable render page caching. This is an experimental performance optimization that is off by
      default.
    name: usePageCache
    fullName: usePageCache
    langs:
      - typeScript
    type: property
    syntax:
      content: 'usePageCache?: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.IDetailsListProps.useReducedRowRenderer
    summary: Rerender DetailsRow only when props changed. Might cause regression when depending on external updates.
    name: useReducedRowRenderer
    fullName: useReducedRowRenderer
    langs:
      - typeScript
    type: property
    syntax:
      content: 'useReducedRowRenderer?: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.IDetailsListProps.viewport
    summary: 'Viewport, provided by the withViewport decorator.'
    name: viewport
    fullName: viewport
    langs:
      - typeScript
    type: property
    syntax:
      content: 'viewport?: IViewport;'
      return:
        type:
          - IViewport
