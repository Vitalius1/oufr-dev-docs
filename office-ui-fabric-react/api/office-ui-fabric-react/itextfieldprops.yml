### YamlMime:UniversalReference
items:
  - uid: office-ui-fabric-react.ITextFieldProps
    summary: TextField component props.
    name: ITextFieldProps
    fullName: ITextFieldProps
    langs:
      - typeScript
    type: interface
    extends:
      - 'React.AllHTMLAttributes<HTMLInputElement | HTMLTextAreaElement> '
    package: office-ui-fabric-react
    children:
      - office-ui-fabric-react.ITextFieldProps.addonString
      - office-ui-fabric-react.ITextFieldProps.ariaLabel
      - office-ui-fabric-react.ITextFieldProps.autoAdjustHeight
      - office-ui-fabric-react.ITextFieldProps.autoComplete
      - office-ui-fabric-react.ITextFieldProps.borderless
      - office-ui-fabric-react.ITextFieldProps.className
      - office-ui-fabric-react.ITextFieldProps.componentId
      - office-ui-fabric-react.ITextFieldProps.componentRef
      - office-ui-fabric-react.ITextFieldProps.defaultValue
      - office-ui-fabric-react.ITextFieldProps.deferredValidationTime
      - office-ui-fabric-react.ITextFieldProps.description
      - office-ui-fabric-react.ITextFieldProps.disabled
      - office-ui-fabric-react.ITextFieldProps.errorMessage
      - office-ui-fabric-react.ITextFieldProps.iconClass
      - office-ui-fabric-react.ITextFieldProps.iconProps
      - office-ui-fabric-react.ITextFieldProps.inputClassName
      - office-ui-fabric-react.ITextFieldProps.label
      - office-ui-fabric-react.ITextFieldProps.mask
      - office-ui-fabric-react.ITextFieldProps.maskChar
      - office-ui-fabric-react.ITextFieldProps.maskFormat
      - office-ui-fabric-react.ITextFieldProps.multiline
      - office-ui-fabric-react.ITextFieldProps.onBeforeChange
      - office-ui-fabric-react.ITextFieldProps.onChange
      - office-ui-fabric-react.ITextFieldProps.onChanged
      - office-ui-fabric-react.ITextFieldProps.onGetErrorMessage
      - office-ui-fabric-react.ITextFieldProps.onNotifyValidationResult
      - office-ui-fabric-react.ITextFieldProps.onRenderAddon
      - office-ui-fabric-react.ITextFieldProps.onRenderDescription
      - office-ui-fabric-react.ITextFieldProps.onRenderLabel
      - office-ui-fabric-react.ITextFieldProps.onRenderPrefix
      - office-ui-fabric-react.ITextFieldProps.onRenderSuffix
      - office-ui-fabric-react.ITextFieldProps.prefix
      - office-ui-fabric-react.ITextFieldProps.readOnly
      - office-ui-fabric-react.ITextFieldProps.resizable
      - office-ui-fabric-react.ITextFieldProps.styles
      - office-ui-fabric-react.ITextFieldProps.suffix
      - office-ui-fabric-react.ITextFieldProps.theme
      - office-ui-fabric-react.ITextFieldProps.underlined
      - office-ui-fabric-react.ITextFieldProps.validateOnFocusIn
      - office-ui-fabric-react.ITextFieldProps.validateOnFocusOut
      - office-ui-fabric-react.ITextFieldProps.validateOnLoad
      - office-ui-fabric-react.ITextFieldProps.value
  - uid: office-ui-fabric-react.ITextFieldProps.addonString
    deprecated:
      content: Use `prefix` instead.
    name: addonString
    fullName: addonString
    langs:
      - typeScript
    type: property
    syntax:
      content: 'addonString?: string;'
      return:
        type:
          - string
  - uid: office-ui-fabric-react.ITextFieldProps.ariaLabel
    summary: Aria label for the text field.
    name: ariaLabel
    fullName: ariaLabel
    langs:
      - typeScript
    type: property
    syntax:
      content: 'ariaLabel?: string;'
      return:
        type:
          - string
  - uid: office-ui-fabric-react.ITextFieldProps.autoAdjustHeight
    summary: 'For multiline text fields, whether or not to auto adjust text field height.'
    name: autoAdjustHeight
    fullName: autoAdjustHeight
    langs:
      - typeScript
    type: property
    syntax:
      content: 'autoAdjustHeight?: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.ITextFieldProps.autoComplete
    summary: >-
      Whether the input field should have autocomplete enabled. This tells the browser to display options based on
      earlier typed values. Common values are 'on' and 'off' but for all possible values see the following links:
      https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete\#Values
      https://html.spec.whatwg.org/multipage/form-control-infrastructure.html\#autofill
    name: autoComplete
    fullName: autoComplete
    langs:
      - typeScript
    type: property
    syntax:
      content: 'autoComplete?: string;'
      return:
        type:
          - string
  - uid: office-ui-fabric-react.ITextFieldProps.borderless
    summary: Whether or not the text field is borderless.
    name: borderless
    fullName: borderless
    langs:
      - typeScript
    type: property
    syntax:
      content: 'borderless?: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.ITextFieldProps.className
    summary: Optional class name that is added to the container of the component.
    name: className
    fullName: className
    langs:
      - typeScript
    type: property
    syntax:
      content: 'className?: string;'
      return:
        type:
          - string
  - uid: office-ui-fabric-react.ITextFieldProps.componentId
    deprecated:
      content: Serves no function.
    name: componentId
    fullName: componentId
    langs:
      - typeScript
    type: property
    syntax:
      content: 'componentId?: string;'
      return:
        type:
          - string
  - uid: office-ui-fabric-react.ITextFieldProps.componentRef
    summary: >-
      Optional callback to access the ITextField component. Use this instead of ref for accessing the public methods and
      properties of the component.
    name: componentRef
    fullName: componentRef
    langs:
      - typeScript
    type: property
    syntax:
      content: 'componentRef?: IRefObject<ITextField>;'
      return:
        type:
          - IRefObject<ITextField>
  - uid: office-ui-fabric-react.ITextFieldProps.defaultValue
    summary: >-
      Default value of the text field. Only provide this if the text field is an uncontrolled component; otherwise, use
      the `value` property.
    name: defaultValue
    fullName: defaultValue
    langs:
      - typeScript
    type: property
    syntax:
      content: 'defaultValue?: string;'
      return:
        type:
          - string
  - uid: office-ui-fabric-react.ITextFieldProps.deferredValidationTime
    summary: Text field will start to validate after users stop typing for `deferredValidationTime` milliseconds.
    name: deferredValidationTime
    fullName: deferredValidationTime
    langs:
      - typeScript
    type: property
    syntax:
      content: 'deferredValidationTime?: number;'
      return:
        type:
          - number
  - uid: office-ui-fabric-react.ITextFieldProps.description
    summary: Description displayed below the text field to provide additional details about what text to enter.
    name: description
    fullName: description
    langs:
      - typeScript
    type: property
    syntax:
      content: 'description?: string;'
      return:
        type:
          - string
  - uid: office-ui-fabric-react.ITextFieldProps.disabled
    summary: Disabled state of the text field.
    name: disabled
    fullName: disabled
    langs:
      - typeScript
    type: property
    syntax:
      content: 'disabled?: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.ITextFieldProps.errorMessage
    summary: >-
      Static error message displayed below the text field. Use `onGetErrorMessage` to dynamically change the error
      message displayed (if any) based on the current value. `errorMessage` and `onGetErrorMessage` are mutually
      exclusive (`errorMessage` takes precedence).
    name: errorMessage
    fullName: errorMessage
    langs:
      - typeScript
    type: property
    syntax:
      content: 'errorMessage?: string;'
      return:
        type:
          - string
  - uid: office-ui-fabric-react.ITextFieldProps.iconClass
    deprecated:
      content: Use `iconProps` instead.
    name: iconClass
    fullName: iconClass
    langs:
      - typeScript
    type: property
    syntax:
      content: 'iconClass?: string;'
      return:
        type:
          - string
  - uid: office-ui-fabric-react.ITextFieldProps.iconProps
    summary: 'Props for an optional icon, displayed in the far right end of the text field.'
    name: iconProps
    fullName: iconProps
    langs:
      - typeScript
    type: property
    syntax:
      content: 'iconProps?: IIconProps;'
      return:
        type:
          - office-ui-fabric-react.IIconProps
  - uid: office-ui-fabric-react.ITextFieldProps.inputClassName
    summary: Optional class name that is added specifically to the input/textarea element.
    name: inputClassName
    fullName: inputClassName
    langs:
      - typeScript
    type: property
    syntax:
      content: 'inputClassName?: string;'
      return:
        type:
          - string
  - uid: office-ui-fabric-react.ITextFieldProps.label
    summary: Label displayed above the text field (and read by screen readers).
    name: label
    fullName: label
    langs:
      - typeScript
    type: property
    syntax:
      content: 'label?: string;'
      return:
        type:
          - string
  - uid: office-ui-fabric-react.ITextFieldProps.mask
    summary: >-
      The masking string that defines the mask's behavior. A backslash will escape any character. Special format
      characters are: '9': \[0-9\] 'a': \[a-zA-Z\] '\*': \[a-zA-Z0-9\]
    name: mask
    fullName: mask
    langs:
      - typeScript
    type: property
    syntax:
      content: 'mask?: string;'
      return:
        type:
          - string
  - uid: office-ui-fabric-react.ITextFieldProps.maskChar
    summary: The character to show in place of unfilled characters of the mask.
    name: maskChar
    fullName: maskChar
    langs:
      - typeScript
    type: property
    syntax:
      content: 'maskChar?: string;'
      return:
        type:
          - string
  - uid: office-ui-fabric-react.ITextFieldProps.maskFormat
    summary: >-
      An object defining the format characters and corresponding regexp values. Default format characters: { '9':
      /\[0-9\]/, 'a': /\[a-zA-Z\]/, '\*': /\[a-zA-Z0-9\]/ }
    name: maskFormat
    fullName: maskFormat
    langs:
      - typeScript
    type: property
    syntax:
      content: |-
        maskFormat?: {
                [key: string]: RegExp;
            };
      return:
        type:
          - |-
            {
                    [key: string]: RegExp;
                }
  - uid: office-ui-fabric-react.ITextFieldProps.multiline
    summary: Whether or not the text field is a multiline text field.
    name: multiline
    fullName: multiline
    langs:
      - typeScript
    type: property
    syntax:
      content: 'multiline?: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.ITextFieldProps.onBeforeChange
    summary: >-
      Called after the input's value updates but before re-rendering. Unlike `onChange`<!-- -->, this is also called
      when the value is updated via props.


      NOTE: This should be used \*very\* rarely. `onChange` is more appropriate for most situations.
    name: onBeforeChange
    fullName: onBeforeChange
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onBeforeChange?: (newValue?: string) => void;'
      return:
        type:
          - '(newValue?: string) => void'
  - uid: office-ui-fabric-react.ITextFieldProps.onChange
    summary: Callback for when the input value changes. This is called on both `input` and `change` native events.
    name: onChange
    fullName: onChange
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onChange?: (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => void;'
      return:
        type:
          - '(event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => void'
  - uid: office-ui-fabric-react.ITextFieldProps.onChanged
    deprecated:
      content: Use `onChange` instead.
    name: onChanged
    fullName: onChanged
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onChanged?: (newValue: any) => void;'
      return:
        type:
          - '(newValue: any) => void'
  - uid: office-ui-fabric-react.ITextFieldProps.onGetErrorMessage
    summary: >-
      Function used to determine whether the input value is valid and get an error message if not. Mutually exclusive
      with the static string `errorMessage` (it will take precedence over this).


      When it returns string: - If valid, it returns empty string. - If invalid, it returns the error message string and
      the text field will show a red border and show an error message below the text field.


      When it returns Promise<string>: - The resolved value is displayed as the error message. - If rejected, the value
      is thrown away.
    name: onGetErrorMessage
    fullName: onGetErrorMessage
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onGetErrorMessage?: (value: string) => string | PromiseLike<string> | undefined;'
      return:
        type:
          - '(value: string) => string | PromiseLike<string> | undefined'
  - uid: office-ui-fabric-react.ITextFieldProps.onNotifyValidationResult
    summary: Function called after validation completes.
    name: onNotifyValidationResult
    fullName: onNotifyValidationResult
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onNotifyValidationResult?: (errorMessage: string, value: string | undefined) => void;'
      return:
        type:
          - '(errorMessage: string, value: string | undefined) => void'
  - uid: office-ui-fabric-react.ITextFieldProps.onRenderAddon
    deprecated:
      content: Use `onRenderPrefix` instead.
    name: onRenderAddon
    fullName: onRenderAddon
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onRenderAddon?: IRenderFunction<ITextFieldProps>;'
      return:
        type:
          - IRenderFunction<ITextFieldProps>
  - uid: office-ui-fabric-react.ITextFieldProps.onRenderDescription
    summary: Custom renderer for the description.
    name: onRenderDescription
    fullName: onRenderDescription
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onRenderDescription?: IRenderFunction<ITextFieldProps>;'
      return:
        type:
          - IRenderFunction<ITextFieldProps>
  - uid: office-ui-fabric-react.ITextFieldProps.onRenderLabel
    summary: Custom renderer for the label.
    name: onRenderLabel
    fullName: onRenderLabel
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onRenderLabel?: IRenderFunction<ITextFieldProps>;'
      return:
        type:
          - IRenderFunction<ITextFieldProps>
  - uid: office-ui-fabric-react.ITextFieldProps.onRenderPrefix
    summary: Custom render function for prefix.
    name: onRenderPrefix
    fullName: onRenderPrefix
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onRenderPrefix?: IRenderFunction<ITextFieldProps>;'
      return:
        type:
          - IRenderFunction<ITextFieldProps>
  - uid: office-ui-fabric-react.ITextFieldProps.onRenderSuffix
    summary: Custom render function for suffix.
    name: onRenderSuffix
    fullName: onRenderSuffix
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onRenderSuffix?: IRenderFunction<ITextFieldProps>;'
      return:
        type:
          - IRenderFunction<ITextFieldProps>
  - uid: office-ui-fabric-react.ITextFieldProps.prefix
    summary: >-
      Prefix displayed before the text field contents. This is not included in the value. Ensure a descriptive label is
      present to assist screen readers, as the value does not include the prefix.
    name: prefix
    fullName: prefix
    langs:
      - typeScript
    type: property
    syntax:
      content: 'prefix?: string;'
      return:
        type:
          - string
  - uid: office-ui-fabric-react.ITextFieldProps.readOnly
    summary: 'If true, the text field is readonly.'
    name: readOnly
    fullName: readOnly
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readOnly?: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.ITextFieldProps.resizable
    summary: 'For multiline text fields, whether or not the field is resizable.'
    name: resizable
    fullName: resizable
    langs:
      - typeScript
    type: property
    syntax:
      content: 'resizable?: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.ITextFieldProps.styles
    summary: Call to provide customized styling that will layer on top of the variant rules.
    name: styles
    fullName: styles
    langs:
      - typeScript
    type: property
    syntax:
      content: 'styles?: IStyleFunctionOrObject<ITextFieldStyleProps, ITextFieldStyles>;'
      return:
        type:
          - 'IStyleFunctionOrObject<ITextFieldStyleProps, ITextFieldStyles>'
  - uid: office-ui-fabric-react.ITextFieldProps.suffix
    summary: >-
      Suffix displayed after the text field contents. This is not included in the value. Ensure a descriptive label is
      present to assist screen readers, as the value does not include the suffix.
    name: suffix
    fullName: suffix
    langs:
      - typeScript
    type: property
    syntax:
      content: 'suffix?: string;'
      return:
        type:
          - string
  - uid: office-ui-fabric-react.ITextFieldProps.theme
    summary: Theme (provided through customization).
    name: theme
    fullName: theme
    langs:
      - typeScript
    type: property
    syntax:
      content: 'theme?: ITheme;'
      return:
        type:
          - styling.ITheme
  - uid: office-ui-fabric-react.ITextFieldProps.underlined
    summary: Whether or not the text field is underlined.
    name: underlined
    fullName: underlined
    langs:
      - typeScript
    type: property
    syntax:
      content: 'underlined?: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.ITextFieldProps.validateOnFocusIn
    summary: |-
      Run validation when focus moves into the input, and \*\*do not\*\* validate on change.

      (Unless this prop and/or `validateOnFocusOut` is set to true, validation will run on every change.)
    name: validateOnFocusIn
    fullName: validateOnFocusIn
    langs:
      - typeScript
    type: property
    syntax:
      content: 'validateOnFocusIn?: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.ITextFieldProps.validateOnFocusOut
    summary: |-
      Run validation when focus moves out of the input, and \*\*do not\*\* validate on change.

      (Unless this prop and/or `validateOnFocusIn` is set to true, validation will run on every change.)
    name: validateOnFocusOut
    fullName: validateOnFocusOut
    langs:
      - typeScript
    type: property
    syntax:
      content: 'validateOnFocusOut?: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.ITextFieldProps.validateOnLoad
    summary: Whether validation should run when the input is initially rendered.
    name: validateOnLoad
    fullName: validateOnLoad
    langs:
      - typeScript
    type: property
    syntax:
      content: 'validateOnLoad?: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.ITextFieldProps.value
    summary: >-
      Current value of the text field. Only provide this if the text field is a controlled component where you are
      maintaining its current state; otherwise, use the `defaultValue` property.
    name: value
    fullName: value
    langs:
      - typeScript
    type: property
    syntax:
      content: 'value?: string;'
      return:
        type:
          - string
