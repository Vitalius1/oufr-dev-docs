### YamlMime:UniversalReference
items:
  - uid: office-ui-fabric-react.IContextualMenuProps
    summary: React.Props is deprecated and we're removing it in 6.0. Usage of 'any' should go away with it.
    name: IContextualMenuProps
    fullName: IContextualMenuProps
    langs:
      - typeScript
    type: interface
    extends:
      - IBaseProps<IContextualMenu>
      - 'IWithResponsiveModeState '
    package: office-ui-fabric-react
    children:
      - office-ui-fabric-react.IContextualMenuProps.alignTargetEdge
      - office-ui-fabric-react.IContextualMenuProps.ariaLabel
      - office-ui-fabric-react.IContextualMenuProps.beakWidth
      - office-ui-fabric-react.IContextualMenuProps.bounds
      - office-ui-fabric-react.IContextualMenuProps.calloutProps
      - office-ui-fabric-react.IContextualMenuProps.className
      - office-ui-fabric-react.IContextualMenuProps.componentRef
      - office-ui-fabric-react.IContextualMenuProps.contextualMenuItemAs
      - office-ui-fabric-react.IContextualMenuProps.coverTarget
      - office-ui-fabric-react.IContextualMenuProps.delayUpdateFocusOnHover
      - office-ui-fabric-react.IContextualMenuProps.directionalHint
      - office-ui-fabric-react.IContextualMenuProps.directionalHintFixed
      - office-ui-fabric-react.IContextualMenuProps.directionalHintForRTL
      - office-ui-fabric-react.IContextualMenuProps.doNotLayer
      - office-ui-fabric-react.IContextualMenuProps.focusZoneProps
      - office-ui-fabric-react.IContextualMenuProps.gapSpace
      - office-ui-fabric-react.IContextualMenuProps.getMenuClassNames
      - office-ui-fabric-react.IContextualMenuProps.hidden
      - office-ui-fabric-react.IContextualMenuProps.id
      - office-ui-fabric-react.IContextualMenuProps.isBeakVisible
      - office-ui-fabric-react.IContextualMenuProps.isSubMenu
      - office-ui-fabric-react.IContextualMenuProps.items
      - office-ui-fabric-react.IContextualMenuProps.labelElementId
      - office-ui-fabric-react.IContextualMenuProps.onDismiss
      - office-ui-fabric-react.IContextualMenuProps.onItemClick
      - office-ui-fabric-react.IContextualMenuProps.onMenuDismissed
      - office-ui-fabric-react.IContextualMenuProps.onMenuOpened
      - office-ui-fabric-react.IContextualMenuProps.onRenderMenuList
      - office-ui-fabric-react.IContextualMenuProps.onRenderSubMenu
      - office-ui-fabric-react.IContextualMenuProps.shouldFocusOnContainer
      - office-ui-fabric-react.IContextualMenuProps.shouldFocusOnMount
      - office-ui-fabric-react.IContextualMenuProps.styles
      - office-ui-fabric-react.IContextualMenuProps.subMenuHoverDelay
      - office-ui-fabric-react.IContextualMenuProps.target
      - office-ui-fabric-react.IContextualMenuProps.theme
      - office-ui-fabric-react.IContextualMenuProps.title
      - office-ui-fabric-react.IContextualMenuProps.useTargetAsMinWidth
      - office-ui-fabric-react.IContextualMenuProps.useTargetWidth
  - uid: office-ui-fabric-react.IContextualMenuProps.alignTargetEdge
    summary: >-
      If true the positioning logic will prefer to flip edges rather than to nudge the rectangle to fit within bounds,
      thus making sure the element aligns perfectly with target's alignment edge
    name: alignTargetEdge
    fullName: alignTargetEdge
    langs:
      - typeScript
    type: property
    syntax:
      content: 'alignTargetEdge?: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.IContextualMenuProps.ariaLabel
    summary: >-
      Aria label for accessibility for the ContextualMenu. If none specified no aria label will be applied to the
      ContextualMenu.
    name: ariaLabel
    fullName: ariaLabel
    langs:
      - typeScript
    type: property
    syntax:
      content: 'ariaLabel?: string;'
      return:
        type:
          - string
  - uid: office-ui-fabric-react.IContextualMenuProps.beakWidth
    summary: The width of the beak.
    name: beakWidth
    fullName: beakWidth
    langs:
      - typeScript
    type: property
    syntax:
      content: 'beakWidth?: number;'
      return:
        type:
          - number
  - uid: office-ui-fabric-react.IContextualMenuProps.bounds
    summary: The bounding rectangle for which the contextual menu can appear in.
    name: bounds
    fullName: bounds
    langs:
      - typeScript
    type: property
    syntax:
      content: 'bounds?: IRectangle;'
      return:
        type:
          - utilities.IRectangle
  - uid: office-ui-fabric-react.IContextualMenuProps.calloutProps
    summary: Pass in custom callout props
    name: calloutProps
    fullName: calloutProps
    langs:
      - typeScript
    type: property
    syntax:
      content: 'calloutProps?: ICalloutProps;'
      return:
        type:
          - office-ui-fabric-react.ICalloutProps
  - uid: office-ui-fabric-react.IContextualMenuProps.className
    summary: Additional css class to apply to the ContextualMenu
    name: className
    fullName: className
    langs:
      - typeScript
    type: property
    syntax:
      content: 'className?: string;'
      return:
        type:
          - string
  - uid: office-ui-fabric-react.IContextualMenuProps.componentRef
    summary: >-
      Optional callback to access the IContextualMenu interface. Use this instead of ref for accessing the public
      methods and properties of the component.
    name: componentRef
    fullName: componentRef
    langs:
      - typeScript
    type: property
    syntax:
      content: 'componentRef?: IRefObject<IContextualMenu>;'
      return:
        type:
          - IRefObject<IContextualMenu>
  - uid: office-ui-fabric-react.IContextualMenuProps.contextualMenuItemAs
    summary: Method to override the render of the individual menu items
    name: contextualMenuItemAs
    fullName: contextualMenuItemAs
    langs:
      - typeScript
    type: property
    syntax:
      content: >-
        contextualMenuItemAs?: React.ComponentClass<IContextualMenuItemProps> |
        React.StatelessComponent<IContextualMenuItemProps>;
      return:
        type:
          - React.ComponentClass<IContextualMenuItemProps> | React.StatelessComponent<IContextualMenuItemProps>
  - uid: office-ui-fabric-react.IContextualMenuProps.coverTarget
    summary: >-
      If true the position returned will have the menu element cover the target. If false then it will position next to
      the target;
    name: coverTarget
    fullName: coverTarget
    langs:
      - typeScript
    type: property
    syntax:
      content: 'coverTarget?: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.IContextualMenuProps.delayUpdateFocusOnHover
    summary: >-
      If true, the contextual menu will not be updated until focus enters the menu via other means. This will only
      result in different behavior when shouldFocusOnMount = false
    name: delayUpdateFocusOnHover
    fullName: delayUpdateFocusOnHover
    langs:
      - typeScript
    type: property
    syntax:
      content: 'delayUpdateFocusOnHover?: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.IContextualMenuProps.directionalHint
    summary: How the element should be positioned
    name: directionalHint
    fullName: directionalHint
    langs:
      - typeScript
    type: property
    syntax:
      content: 'directionalHint?: DirectionalHint;'
      return:
        type:
          - DirectionalHint
  - uid: office-ui-fabric-react.IContextualMenuProps.directionalHintFixed
    summary: >-
      If true the position will not change sides in an attempt to fit the ContextualMenu within bounds. It will still
      attempt to align it to whatever bounds are given.
    name: directionalHintFixed
    fullName: directionalHintFixed
    langs:
      - typeScript
    type: property
    syntax:
      content: 'directionalHintFixed?: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.IContextualMenuProps.directionalHintForRTL
    summary: >-
      How the element should be positioned in RTL layouts. If not specified, a mirror of `directionalHint` will be used
      instead
    name: directionalHintForRTL
    fullName: directionalHintForRTL
    langs:
      - typeScript
    type: property
    syntax:
      content: 'directionalHintForRTL?: DirectionalHint;'
      return:
        type:
          - DirectionalHint
  - uid: office-ui-fabric-react.IContextualMenuProps.doNotLayer
    summary: If true do not render on a new layer. If false render on a new layer.
    name: doNotLayer
    fullName: doNotLayer
    langs:
      - typeScript
    type: property
    syntax:
      content: 'doNotLayer?: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.IContextualMenuProps.focusZoneProps
    summary: >-
      Props to pass down to the FocusZone. NOTE: the default FocusZoneDirection will be used unless a direction is
      specified in the focusZoneProps (even if other focusZoneProps are defined)
    name: focusZoneProps
    fullName: focusZoneProps
    langs:
      - typeScript
    type: property
    syntax:
      content: 'focusZoneProps?: IFocusZoneProps;'
      return:
        type:
          - office-ui-fabric-react.IFocusZoneProps
  - uid: office-ui-fabric-react.IContextualMenuProps.gapSpace
    summary: The gap between the ContextualMenu and the target
    name: gapSpace
    fullName: gapSpace
    langs:
      - typeScript
    type: property
    syntax:
      content: 'gapSpace?: number;'
      return:
        type:
          - number
  - uid: office-ui-fabric-react.IContextualMenuProps.getMenuClassNames
    summary: >-
      Method to provide the classnames to style the contextual menu. Default value is the getMenuClassnames func defined
      in ContextualMenu.classnames. Deprecated, use `styles` prop of `IContextualMenuProps` to leverage mergeStyles API.
    deprecated:
      content: Use `styles` prop of `IContextualMenuProps` to leverage mergeStyles API.
    name: getMenuClassNames
    fullName: getMenuClassNames
    langs:
      - typeScript
    type: property
    syntax:
      content: 'getMenuClassNames?: (theme: ITheme, className?: string) => IContextualMenuClassNames;'
      return:
        type:
          - '(theme: ITheme, className?: string) => IContextualMenuClassNames'
  - uid: office-ui-fabric-react.IContextualMenuProps.hidden
    summary: >-
      If specified, renders the ContextualMenu in a hidden state. Use this flag, rather than rendering a ContextualMenu
      conditionally based on visibility, to improve rendering performance when it becomes visible. Note: When
      ContextualMenu is hidden its content will not be rendered. It will only render once the ContextualMenu is visible.
    name: hidden
    fullName: hidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'hidden?: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.IContextualMenuProps.id
    summary: >-
      DOM id to tag the ContextualMenu with, for reference. Should be used for 'aria-owns' and other such uses, rather
      than direct reference for programmatic purposes.
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'id?: string;'
      return:
        type:
          - string
  - uid: office-ui-fabric-react.IContextualMenuProps.isBeakVisible
    summary: If true then the beak is visible. If false it will not be shown.
    name: isBeakVisible
    fullName: isBeakVisible
    langs:
      - typeScript
    type: property
    syntax:
      content: 'isBeakVisible?: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.IContextualMenuProps.isSubMenu
    summary: Whether this menu is a submenu of another menu or not.
    name: isSubMenu
    fullName: isSubMenu
    langs:
      - typeScript
    type: property
    syntax:
      content: 'isSubMenu?: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.IContextualMenuProps.items
    summary: Collection of menu items.
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'items: IContextualMenuItem[];'
      return:
        type:
          - 'IContextualMenuItem[]'
  - uid: office-ui-fabric-react.IContextualMenuProps.labelElementId
    summary: Aria Labelled by labelElementId
    name: labelElementId
    fullName: labelElementId
    langs:
      - typeScript
    type: property
    syntax:
      content: 'labelElementId?: string;'
      return:
        type:
          - string
  - uid: office-ui-fabric-react.IContextualMenuProps.onDismiss
    summary: Callback when the ContextualMenu tries to close. If dismissAll is true then all submenus will be dismissed.
    name: onDismiss
    fullName: onDismiss
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onDismiss?: (ev?: any, dismissAll?: boolean) => void;'
      return:
        type:
          - '(ev?: any, dismissAll?: boolean) => void'
  - uid: office-ui-fabric-react.IContextualMenuProps.onItemClick
    summary: >-
      Click handler which is invoked if onClick is not passed for individual contextual menu item. Returning true will
      dismiss the menu even if ev.preventDefault() was called.
    name: onItemClick
    fullName: onItemClick
    langs:
      - typeScript
    type: property
    syntax:
      content: >-
        onItemClick?: (ev?: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, item?:
        IContextualMenuItem) => boolean | void;
      return:
        type:
          - >-
            (ev?: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, item?: IContextualMenuItem) =>
            boolean | void
  - uid: office-ui-fabric-react.IContextualMenuProps.onMenuDismissed
    summary: Callback for when the contextualmenu is being closed (removing from the DOM)
    name: onMenuDismissed
    fullName: onMenuDismissed
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onMenuDismissed?: (contextualMenu?: IContextualMenuProps) => void;'
      return:
        type:
          - '(contextualMenu?: IContextualMenuProps) => void'
  - uid: office-ui-fabric-react.IContextualMenuProps.onMenuOpened
    summary: Callback for when the contextualmenu has been opened.
    name: onMenuOpened
    fullName: onMenuOpened
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onMenuOpened?: (contextualMenu?: IContextualMenuProps) => void;'
      return:
        type:
          - '(contextualMenu?: IContextualMenuProps) => void'
  - uid: office-ui-fabric-react.IContextualMenuProps.onRenderMenuList
    summary: Method to override the render of the list of menu items.
    name: onRenderMenuList
    fullName: onRenderMenuList
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onRenderMenuList?: IRenderFunction<IContextualMenuListProps>;'
      return:
        type:
          - IRenderFunction<IContextualMenuListProps>
  - uid: office-ui-fabric-react.IContextualMenuProps.onRenderSubMenu
    summary: Method to call when trying to render a submenu.
    name: onRenderSubMenu
    fullName: onRenderSubMenu
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onRenderSubMenu?: IRenderFunction<IContextualMenuProps>;'
      return:
        type:
          - IRenderFunction<IContextualMenuProps>
  - uid: office-ui-fabric-react.IContextualMenuProps.shouldFocusOnContainer
    summary: Whether to focus on the contextual menu container (as opposed to the first menu item).
    name: shouldFocusOnContainer
    fullName: shouldFocusOnContainer
    langs:
      - typeScript
    type: property
    syntax:
      content: 'shouldFocusOnContainer?: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.IContextualMenuProps.shouldFocusOnMount
    summary: Whether to focus on the menu when mounted.
    name: shouldFocusOnMount
    fullName: shouldFocusOnMount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'shouldFocusOnMount?: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.IContextualMenuProps.styles
    summary: Call to provide customized styling that will layer on top of the variant rules.
    name: styles
    fullName: styles
    langs:
      - typeScript
    type: property
    syntax:
      content: 'styles?: IStyleFunctionOrObject<IContextualMenuStyleProps, IContextualMenuStyles>;'
      return:
        type:
          - 'IStyleFunctionOrObject<IContextualMenuStyleProps, IContextualMenuStyles>'
  - uid: office-ui-fabric-react.IContextualMenuProps.subMenuHoverDelay
    summary: Delay (in milliseconds) to wait before expanding / dismissing a submenu on mouseEnter or mouseLeave
    name: subMenuHoverDelay
    fullName: subMenuHoverDelay
    langs:
      - typeScript
    type: property
    syntax:
      content: 'subMenuHoverDelay?: number;'
      return:
        type:
          - number
  - uid: office-ui-fabric-react.IContextualMenuProps.target
    summary: >-
      The target that the ContextualMenu should try to position itself based on. It can be either an Element a
      querySelector string of a valid Element or a MouseEvent. If MouseEvent is given then the origin point of the event
      will be used.
    name: target
    fullName: target
    langs:
      - typeScript
    type: property
    syntax:
      content: 'target?: Target;'
      return:
        type:
          - Target
  - uid: office-ui-fabric-react.IContextualMenuProps.theme
    summary: Theme provided by High-Order Component.
    name: theme
    fullName: theme
    langs:
      - typeScript
    type: property
    syntax:
      content: 'theme?: ITheme;'
      return:
        type:
          - styling.ITheme
  - uid: office-ui-fabric-react.IContextualMenuProps.title
    summary: Optional title to be displayed on top of the menu.
    name: title
    fullName: title
    langs:
      - typeScript
    type: property
    syntax:
      content: 'title?: string;'
      return:
        type:
          - string
  - uid: office-ui-fabric-react.IContextualMenuProps.useTargetAsMinWidth
    summary: If true the context menu will have a minimum width equal to the width of the target element
    name: useTargetAsMinWidth
    fullName: useTargetAsMinWidth
    langs:
      - typeScript
    type: property
    syntax:
      content: 'useTargetAsMinWidth?: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.IContextualMenuProps.useTargetWidth
    summary: If true the context menu will render as the same width as the target element
    name: useTargetWidth
    fullName: useTargetWidth
    langs:
      - typeScript
    type: property
    syntax:
      content: 'useTargetWidth?: boolean;'
      return:
        type:
          - boolean
