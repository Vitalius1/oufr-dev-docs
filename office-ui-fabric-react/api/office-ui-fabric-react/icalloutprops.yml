### YamlMime:UniversalReference
items:
  - uid: office-ui-fabric-react.ICalloutProps
    name: ICalloutProps
    fullName: ICalloutProps
    langs:
      - typeScript
    type: interface
    extends:
      - 'React.HTMLAttributes<HTMLDivElement> '
    package: office-ui-fabric-react
    children:
      - office-ui-fabric-react.ICalloutProps.alignTargetEdge
      - office-ui-fabric-react.ICalloutProps.ariaDescribedBy
      - office-ui-fabric-react.ICalloutProps.ariaLabel
      - office-ui-fabric-react.ICalloutProps.ariaLabelledBy
      - office-ui-fabric-react.ICalloutProps.backgroundColor
      - office-ui-fabric-react.ICalloutProps.beakWidth
      - office-ui-fabric-react.ICalloutProps.bounds
      - office-ui-fabric-react.ICalloutProps.calloutMaxHeight
      - office-ui-fabric-react.ICalloutProps.calloutMaxWidth
      - office-ui-fabric-react.ICalloutProps.calloutWidth
      - office-ui-fabric-react.ICalloutProps.className
      - office-ui-fabric-react.ICalloutProps.coverTarget
      - office-ui-fabric-react.ICalloutProps.directionalHint
      - office-ui-fabric-react.ICalloutProps.directionalHintFixed
      - office-ui-fabric-react.ICalloutProps.directionalHintForRTL
      - office-ui-fabric-react.ICalloutProps.doNotLayer
      - office-ui-fabric-react.ICalloutProps.finalHeight
      - office-ui-fabric-react.ICalloutProps.gapSpace
      - office-ui-fabric-react.ICalloutProps.hidden
      - office-ui-fabric-react.ICalloutProps.hideOverflow
      - office-ui-fabric-react.ICalloutProps.isBeakVisible
      - office-ui-fabric-react.ICalloutProps.layerProps
      - office-ui-fabric-react.ICalloutProps.minPagePadding
      - office-ui-fabric-react.ICalloutProps.onDismiss
      - office-ui-fabric-react.ICalloutProps.onLayerMounted
      - office-ui-fabric-react.ICalloutProps.onPositioned
      - office-ui-fabric-react.ICalloutProps.onScroll
      - office-ui-fabric-react.ICalloutProps.preventDismissOnLostFocus
      - office-ui-fabric-react.ICalloutProps.preventDismissOnResize
      - office-ui-fabric-react.ICalloutProps.preventDismissOnScroll
      - office-ui-fabric-react.ICalloutProps.role
      - office-ui-fabric-react.ICalloutProps.setInitialFocus
      - office-ui-fabric-react.ICalloutProps.style
      - office-ui-fabric-react.ICalloutProps.styles
      - office-ui-fabric-react.ICalloutProps.target
      - office-ui-fabric-react.ICalloutProps.theme
  - uid: office-ui-fabric-react.ICalloutProps.alignTargetEdge
    summary: >-
      If true the positioning logic will prefer to flip edges rather than to nudge the rectangle to fit within bounds,
      thus making sure the element aligns perfectly with target's alignment edge
    name: alignTargetEdge
    fullName: alignTargetEdge
    langs:
      - typeScript
    type: property
    syntax:
      content: 'alignTargetEdge?: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.ICalloutProps.ariaDescribedBy
    summary: Defines the element id referencing the element containing the description for the callout.
    name: ariaDescribedBy
    fullName: ariaDescribedBy
    langs:
      - typeScript
    type: property
    syntax:
      content: 'ariaDescribedBy?: string;'
      return:
        type:
          - string
  - uid: office-ui-fabric-react.ICalloutProps.ariaLabel
    summary: Accessible label text for callout.
    name: ariaLabel
    fullName: ariaLabel
    langs:
      - typeScript
    type: property
    syntax:
      content: 'ariaLabel?: string;'
      return:
        type:
          - string
  - uid: office-ui-fabric-react.ICalloutProps.ariaLabelledBy
    summary: Defines the element id referencing the element containing label text for callout.
    name: ariaLabelledBy
    fullName: ariaLabelledBy
    langs:
      - typeScript
    type: property
    syntax:
      content: 'ariaLabelledBy?: string;'
      return:
        type:
          - string
  - uid: office-ui-fabric-react.ICalloutProps.backgroundColor
    summary: 'The background color of the Callout in hex format ie. \#ffffff.'
    name: backgroundColor
    fullName: backgroundColor
    langs:
      - typeScript
    type: property
    syntax:
      content: 'backgroundColor?: string;'
      return:
        type:
          - string
  - uid: office-ui-fabric-react.ICalloutProps.beakWidth
    summary: The width of the beak.
    name: beakWidth
    fullName: beakWidth
    langs:
      - typeScript
    type: property
    syntax:
      content: 'beakWidth?: number;'
      return:
        type:
          - number
  - uid: office-ui-fabric-react.ICalloutProps.bounds
    summary: The bounding rectangle for which the contextual menu can appear in.
    name: bounds
    fullName: bounds
    langs:
      - typeScript
    type: property
    syntax:
      content: 'bounds?: IRectangle;'
      return:
        type:
          - utilities.IRectangle
  - uid: office-ui-fabric-react.ICalloutProps.calloutMaxHeight
    summary: Set max height of callout When not set the callout will expand with contents up to the bottom of the screen
    name: calloutMaxHeight
    fullName: calloutMaxHeight
    langs:
      - typeScript
    type: property
    syntax:
      content: 'calloutMaxHeight?: number;'
      return:
        type:
          - number
  - uid: office-ui-fabric-react.ICalloutProps.calloutMaxWidth
    summary: 'Custom width for callout including borders. If value is 0, no width is applied.'
    name: calloutMaxWidth
    fullName: calloutMaxWidth
    langs:
      - typeScript
    type: property
    syntax:
      content: 'calloutMaxWidth?: number;'
      return:
        type:
          - number
  - uid: office-ui-fabric-react.ICalloutProps.calloutWidth
    summary: 'Custom width for callout including borders. If value is 0, no width is applied.'
    name: calloutWidth
    fullName: calloutWidth
    langs:
      - typeScript
    type: property
    syntax:
      content: 'calloutWidth?: number;'
      return:
        type:
          - number
  - uid: office-ui-fabric-react.ICalloutProps.className
    summary: CSS class to apply to the callout.
    name: className
    fullName: className
    langs:
      - typeScript
    type: property
    syntax:
      content: 'className?: string;'
      return:
        type:
          - string
  - uid: office-ui-fabric-react.ICalloutProps.coverTarget
    summary: >-
      If true the position returned will have the menu element cover the target. If false then it will position next to
      the target;
    name: coverTarget
    fullName: coverTarget
    langs:
      - typeScript
    type: property
    syntax:
      content: 'coverTarget?: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.ICalloutProps.directionalHint
    summary: How the element should be positioned
    name: directionalHint
    fullName: directionalHint
    langs:
      - typeScript
    type: property
    syntax:
      content: 'directionalHint?: DirectionalHint;'
      return:
        type:
          - DirectionalHint
  - uid: office-ui-fabric-react.ICalloutProps.directionalHintFixed
    summary: >-
      If true the position will not change sides in an attempt to fit the callout within bounds. It will still attempt
      to align it to whatever bounds are given.
    name: directionalHintFixed
    fullName: directionalHintFixed
    langs:
      - typeScript
    type: property
    syntax:
      content: 'directionalHintFixed?: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.ICalloutProps.directionalHintForRTL
    summary: >-
      How the element should be positioned in RTL layouts. If not specified, a mirror of `directionalHint` will be used
      instead
    name: directionalHintForRTL
    fullName: directionalHintForRTL
    langs:
      - typeScript
    type: property
    syntax:
      content: 'directionalHintForRTL?: DirectionalHint;'
      return:
        type:
          - DirectionalHint
  - uid: office-ui-fabric-react.ICalloutProps.doNotLayer
    summary: If true do not render on a new layer. If false render on a new layer.
    name: doNotLayer
    fullName: doNotLayer
    langs:
      - typeScript
    type: property
    syntax:
      content: 'doNotLayer?: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.ICalloutProps.finalHeight
    summary: >-
      Specify the final height of the content. To be used when expanding the content dynamically so that callout can
      adjust its position.
    name: finalHeight
    fullName: finalHeight
    langs:
      - typeScript
    type: property
    syntax:
      content: 'finalHeight?: number;'
      return:
        type:
          - number
  - uid: office-ui-fabric-react.ICalloutProps.gapSpace
    summary: The gap between the Callout and the target
    name: gapSpace
    fullName: gapSpace
    langs:
      - typeScript
    type: property
    syntax:
      content: 'gapSpace?: number;'
      return:
        type:
          - number
  - uid: office-ui-fabric-react.ICalloutProps.hidden
    summary: >-
      If specified, renders the Callout in a hidden state. Use this flag, rather than rendering a callout conditionally
      based on visibility, to improve rendering performance when it becomes visible. Note: When callout is hidden its
      content will not be rendered. It will only render once the callout is visible.
    name: hidden
    fullName: hidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'hidden?: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.ICalloutProps.hideOverflow
    summary: >-
      Manually set OverflowYHidden style prop to true on calloutMain element A variety of callout load animations will
      need this to hide the scollbar that can appear
    name: hideOverflow
    fullName: hideOverflow
    langs:
      - typeScript
    type: property
    syntax:
      content: 'hideOverflow?: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.ICalloutProps.isBeakVisible
    summary: If true then the beak is visible. If false it will not be shown.
    name: isBeakVisible
    fullName: isBeakVisible
    langs:
      - typeScript
    type: property
    syntax:
      content: 'isBeakVisible?: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.ICalloutProps.layerProps
    summary: Optional props to pass to the Layer component hosting the panel.
    name: layerProps
    fullName: layerProps
    langs:
      - typeScript
    type: property
    syntax:
      content: 'layerProps?: ILayerProps;'
      return:
        type:
          - office-ui-fabric-react.ILayerProps
  - uid: office-ui-fabric-react.ICalloutProps.minPagePadding
    summary: The minimum distance the callout will be away from the edge of the screen.
    name: minPagePadding
    fullName: minPagePadding
    langs:
      - typeScript
    type: property
    syntax:
      content: 'minPagePadding?: number;'
      return:
        type:
          - number
  - uid: office-ui-fabric-react.ICalloutProps.onDismiss
    summary: Callback when the Callout tries to close.
    name: onDismiss
    fullName: onDismiss
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onDismiss?: (ev?: any) => void;'
      return:
        type:
          - '(ev?: any) => void'
  - uid: office-ui-fabric-react.ICalloutProps.onLayerMounted
    summary: Optional callback when the layer content has mounted.
    name: onLayerMounted
    fullName: onLayerMounted
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onLayerMounted?: () => void;'
      return:
        type:
          - () => void
  - uid: office-ui-fabric-react.ICalloutProps.onPositioned
    summary: Optional callback that is called once the callout has been correctly positioned.
    name: onPositioned
    fullName: onPositioned
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onPositioned?: (positions?: ICalloutPositionedInfo) => void;'
      return:
        type:
          - '(positions?: ICalloutPositionedInfo) => void'
  - uid: office-ui-fabric-react.ICalloutProps.onScroll
    summary: Callback when the Callout body is scrolled.
    name: onScroll
    fullName: onScroll
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onScroll?: () => void;'
      return:
        type:
          - () => void
  - uid: office-ui-fabric-react.ICalloutProps.preventDismissOnLostFocus
    summary: If true then the callout will not dismiss when it loses focus
    name: preventDismissOnLostFocus
    fullName: preventDismissOnLostFocus
    langs:
      - typeScript
    type: property
    syntax:
      content: 'preventDismissOnLostFocus?: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.ICalloutProps.preventDismissOnResize
    summary: If true then the callout will not dismiss on resize
    name: preventDismissOnResize
    fullName: preventDismissOnResize
    langs:
      - typeScript
    type: property
    syntax:
      content: 'preventDismissOnResize?: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.ICalloutProps.preventDismissOnScroll
    summary: If true then the callout will not dismiss on scroll
    name: preventDismissOnScroll
    fullName: preventDismissOnScroll
    langs:
      - typeScript
    type: property
    syntax:
      content: 'preventDismissOnScroll?: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.ICalloutProps.role
    summary: 'Aria role assigned to the callout (Eg. dialog, alertdialog).'
    name: role
    fullName: role
    langs:
      - typeScript
    type: property
    syntax:
      content: 'role?: string;'
      return:
        type:
          - string
  - uid: office-ui-fabric-react.ICalloutProps.setInitialFocus
    summary: >-
      If true then the callout will attempt to focus the first focusable element that it contains. If it doesn't find an
      element, no focus will be set and the method will return false. This means that it's the contents responsibility
      to either set focus or have focusable items.
    name: setInitialFocus
    fullName: setInitialFocus
    langs:
      - typeScript
    type: property
    syntax:
      content: 'setInitialFocus?: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.ICalloutProps.style
    summary: CSS style to apply to the callout.
    name: style
    fullName: style
    langs:
      - typeScript
    type: property
    syntax:
      content: 'style?: React.CSSProperties;'
      return:
        type:
          - React.CSSProperties
  - uid: office-ui-fabric-react.ICalloutProps.styles
    summary: Optional styles for the component.
    name: styles
    fullName: styles
    langs:
      - typeScript
    type: property
    syntax:
      content: 'styles?: IStyleFunctionOrObject<ICalloutContentStyleProps, ICalloutContentStyles>;'
      return:
        type:
          - 'IStyleFunctionOrObject<ICalloutContentStyleProps, ICalloutContentStyles>'
  - uid: office-ui-fabric-react.ICalloutProps.target
    summary: >-
      The target that the Callout should try to position itself based on. It can be either an Element a querySelector
      string of a valid Element or a MouseEvent. If MouseEvent is given then the origin point of the event will be used.
    name: target
    fullName: target
    langs:
      - typeScript
    type: property
    syntax:
      content: 'target?: Target;'
      return:
        type:
          - Target
  - uid: office-ui-fabric-react.ICalloutProps.theme
    summary: Optional theme for component
    name: theme
    fullName: theme
    langs:
      - typeScript
    type: property
    syntax:
      content: 'theme?: ITheme;'
      return:
        type:
          - styling.ITheme
