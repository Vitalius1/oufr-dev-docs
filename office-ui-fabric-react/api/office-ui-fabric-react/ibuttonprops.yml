### YamlMime:UniversalReference
items:
  - uid: office-ui-fabric-react.IButtonProps
    name: IButtonProps
    fullName: IButtonProps
    langs:
      - typeScript
    type: interface
    extends:
      - 'React.AllHTMLAttributes<HTMLAnchorElement | HTMLButtonElement | HTMLDivElement | BaseButton | Button> '
    package: office-ui-fabric-react
    children:
      - office-ui-fabric-react.IButtonProps.allowDisabledFocus
      - office-ui-fabric-react.IButtonProps.ariaDescription
      - office-ui-fabric-react.IButtonProps.ariaHidden
      - office-ui-fabric-react.IButtonProps.ariaLabel
      - office-ui-fabric-react.IButtonProps.buttonType
      - office-ui-fabric-react.IButtonProps.checked
      - office-ui-fabric-react.IButtonProps.className
      - office-ui-fabric-react.IButtonProps.componentRef
      - office-ui-fabric-react.IButtonProps.data
      - office-ui-fabric-react.IButtonProps.description
      - office-ui-fabric-react.IButtonProps.disabled
      - office-ui-fabric-react.IButtonProps.getClassNames
      - office-ui-fabric-react.IButtonProps.getSplitButtonClassNames
      - office-ui-fabric-react.IButtonProps.href
      - office-ui-fabric-react.IButtonProps.iconProps
      - office-ui-fabric-react.IButtonProps.keytipProps
      - office-ui-fabric-react.IButtonProps.menuAs
      - office-ui-fabric-react.IButtonProps.menuIconProps
      - office-ui-fabric-react.IButtonProps.menuProps
      - office-ui-fabric-react.IButtonProps.menuTriggerKeyCode
      - office-ui-fabric-react.IButtonProps.onAfterMenuDismiss
      - office-ui-fabric-react.IButtonProps.onMenuClick
      - office-ui-fabric-react.IButtonProps.onRenderAriaDescription
      - office-ui-fabric-react.IButtonProps.onRenderChildren
      - office-ui-fabric-react.IButtonProps.onRenderDescription
      - office-ui-fabric-react.IButtonProps.onRenderIcon
      - office-ui-fabric-react.IButtonProps.onRenderMenu
      - office-ui-fabric-react.IButtonProps.onRenderMenuIcon
      - office-ui-fabric-react.IButtonProps.onRenderText
      - office-ui-fabric-react.IButtonProps.persistMenu
      - office-ui-fabric-react.IButtonProps.primary
      - office-ui-fabric-react.IButtonProps.primaryDisabled
      - office-ui-fabric-react.IButtonProps.rootProps
      - office-ui-fabric-react.IButtonProps.secondaryText
      - office-ui-fabric-react.IButtonProps.split
      - office-ui-fabric-react.IButtonProps.splitButtonAriaLabel
      - office-ui-fabric-react.IButtonProps.styles
      - office-ui-fabric-react.IButtonProps.text
      - office-ui-fabric-react.IButtonProps.theme
      - office-ui-fabric-react.IButtonProps.toggle
      - office-ui-fabric-react.IButtonProps.toggled
      - office-ui-fabric-react.IButtonProps.uniqueId
  - uid: office-ui-fabric-react.IButtonProps.allowDisabledFocus
    summary: Whether the button can have focus in disabled mode
    name: allowDisabledFocus
    fullName: allowDisabledFocus
    langs:
      - typeScript
    type: property
    syntax:
      content: 'allowDisabledFocus?: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.IButtonProps.ariaDescription
    summary: |-
      Detailed description of the button for the benefit of screen readers.

      Besides the compound button, other button types will need more information provided to screen reader.
    name: ariaDescription
    fullName: ariaDescription
    langs:
      - typeScript
    type: property
    syntax:
      content: 'ariaDescription?: string;'
      return:
        type:
          - string
  - uid: office-ui-fabric-react.IButtonProps.ariaHidden
    summary: If provided and is true it adds an 'aria-hidden' attribute instructing screen readers to ignore the element.
    name: ariaHidden
    fullName: ariaHidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'ariaHidden?: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.IButtonProps.ariaLabel
    summary: The aria label of the button for the benefit of screen readers.
    name: ariaLabel
    fullName: ariaLabel
    langs:
      - typeScript
    type: property
    syntax:
      content: 'ariaLabel?: string;'
      return:
        type:
          - string
  - uid: office-ui-fabric-react.IButtonProps.buttonType
    summary: 'Deprecated at v1.2.3, to be removed at &gt;<!-- -->= v2.0.0. Use specific button component instead.'
    deprecated:
      content: Use specific button component instead.
    name: buttonType
    fullName: buttonType
    langs:
      - typeScript
    type: property
    syntax:
      content: 'buttonType?: ButtonType;'
      return:
        type:
          - office-ui-fabric-react.ButtonType
  - uid: office-ui-fabric-react.IButtonProps.checked
    summary: Whether the button is checked
    name: checked
    fullName: checked
    langs:
      - typeScript
    type: property
    syntax:
      content: 'checked?: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.IButtonProps.className
    summary: 'If provided, additional class name to provide on the root element.'
    name: className
    fullName: className
    langs:
      - typeScript
    type: property
    syntax:
      content: 'className?: string;'
      return:
        type:
          - string
  - uid: office-ui-fabric-react.IButtonProps.componentRef
    summary: >-
      Optional callback to access the IButton interface. Use this instead of ref for accessing the public methods and
      properties of the component.
    name: componentRef
    fullName: componentRef
    langs:
      - typeScript
    type: property
    syntax:
      content: 'componentRef?: IRefObject<IButton>;'
      return:
        type:
          - IRefObject<IButton>
  - uid: office-ui-fabric-react.IButtonProps.data
    summary: Any custom data the developer wishes to associate with the menu item.
    name: data
    fullName: data
    langs:
      - typeScript
    type: property
    syntax:
      content: 'data?: any;'
      return:
        type:
          - any
  - uid: office-ui-fabric-react.IButtonProps.description
    summary: 'Style for the description text if applicable (for compound buttons.) Deprecated, use `secondaryText` instead.'
    deprecated:
      content: Use `secondaryText` instead.
    name: description
    fullName: description
    langs:
      - typeScript
    type: property
    syntax:
      content: 'description?: IStyle;'
      return:
        type:
          - IStyle
  - uid: office-ui-fabric-react.IButtonProps.disabled
    summary: Whether the button is disabled
    name: disabled
    fullName: disabled
    langs:
      - typeScript
    type: property
    syntax:
      content: 'disabled?: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.IButtonProps.getClassNames
    summary: >-
      Method to provide the classnames to style a button. The default value for this prop is the getClassnames func
      defined in BaseButton.classnames.
    name: getClassNames
    fullName: getClassNames
    langs:
      - typeScript
    type: property
    syntax:
      content: >-
        getClassNames?: (theme: ITheme, className: string, variantClassName: string, iconClassName: string | undefined,
        menuIconClassName: string | undefined, disabled: boolean, checked: boolean, expanded: boolean, isSplit: boolean
        | undefined, allowDisabledFocus: boolean) => IButtonClassNames;
      return:
        type:
          - >-
            (theme: ITheme, className: string, variantClassName: string, iconClassName: string | undefined,
            menuIconClassName: string | undefined, disabled: boolean, checked: boolean, expanded: boolean, isSplit:
            boolean | undefined, allowDisabledFocus: boolean) => IButtonClassNames
  - uid: office-ui-fabric-react.IButtonProps.getSplitButtonClassNames
    summary: >-
      Method to provide the classnames to style a button. The default value for this prop is the getClassnames func
      defined in BaseButton.classnames.
    name: getSplitButtonClassNames
    fullName: getSplitButtonClassNames
    langs:
      - typeScript
    type: property
    syntax:
      content: >-
        getSplitButtonClassNames?: (disabled: boolean, expanded: boolean, checked: boolean, allowDisabledFocus: boolean)
        => ISplitButtonClassNames;
      return:
        type:
          - >-
            (disabled: boolean, expanded: boolean, checked: boolean, allowDisabledFocus: boolean) =>
            ISplitButtonClassNames
  - uid: office-ui-fabric-react.IButtonProps.href
    summary: 'If provided, this component will be rendered as an anchor.'
    name: href
    fullName: href
    langs:
      - typeScript
    type: property
    syntax:
      content: 'href?: string;'
      return:
        type:
          - string
  - uid: office-ui-fabric-react.IButtonProps.iconProps
    summary: The props for the icon shown in the button.
    name: iconProps
    fullName: iconProps
    langs:
      - typeScript
    type: property
    syntax:
      content: 'iconProps?: IIconProps;'
      return:
        type:
          - office-ui-fabric-react.IIconProps
  - uid: office-ui-fabric-react.IButtonProps.keytipProps
    summary: Optional keytip for this button
    name: keytipProps
    fullName: keytipProps
    langs:
      - typeScript
    type: property
    syntax:
      content: 'keytipProps?: IKeytipProps;'
      return:
        type:
          - office-ui-fabric-react.IKeytipProps
  - uid: office-ui-fabric-react.IButtonProps.menuAs
    summary: Render a custom menu in place of the normal one.
    name: menuAs
    fullName: menuAs
    langs:
      - typeScript
    type: property
    syntax:
      content: 'menuAs?: IComponentAs<IContextualMenuProps>;'
      return:
        type:
          - IComponentAs<IContextualMenuProps>
  - uid: office-ui-fabric-react.IButtonProps.menuIconProps
    summary: The props for the icon shown when providing a menu dropdown.
    name: menuIconProps
    fullName: menuIconProps
    langs:
      - typeScript
    type: property
    syntax:
      content: 'menuIconProps?: IIconProps;'
      return:
        type:
          - office-ui-fabric-react.IIconProps
  - uid: office-ui-fabric-react.IButtonProps.menuProps
    summary: >-
      Props for button menu. Providing this will default to showing the menu icon. See menuIconProps for overriding how
      the default icon looks. Providing this in addition of onClick and setting the split property to true will render a
      SplitButton.
    name: menuProps
    fullName: menuProps
    langs:
      - typeScript
    type: property
    syntax:
      content: 'menuProps?: IContextualMenuProps;'
      return:
        type:
          - office-ui-fabric-react.IContextualMenuProps
  - uid: office-ui-fabric-react.IButtonProps.menuTriggerKeyCode
    summary: >-
      Provides a custom KeyCode that can be used to open the button menu. The default KeyCode is the down arrow. A value
      of null can be provided to disable the key codes for opening the button menu.
    name: menuTriggerKeyCode
    fullName: menuTriggerKeyCode
    langs:
      - typeScript
    type: property
    syntax:
      content: 'menuTriggerKeyCode?: KeyCodes | null;'
      return:
        type:
          - KeyCodes | null
  - uid: office-ui-fabric-react.IButtonProps.onAfterMenuDismiss
    summary: Callback that runs after Button's contextualmenu was closed (removed from the DOM)
    name: onAfterMenuDismiss
    fullName: onAfterMenuDismiss
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onAfterMenuDismiss?: () => void;'
      return:
        type:
          - () => void
  - uid: office-ui-fabric-react.IButtonProps.onMenuClick
    summary: Optional callback when menu is clicked.
    name: onMenuClick
    fullName: onMenuClick
    langs:
      - typeScript
    type: property
    syntax:
      content: >-
        onMenuClick?: (ev?: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, button?: IButtonProps) =>
        void;
      return:
        type:
          - '(ev?: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, button?: IButtonProps) => void'
  - uid: office-ui-fabric-react.IButtonProps.onRenderAriaDescription
    summary: Custom render function for the aria description element.
    name: onRenderAriaDescription
    fullName: onRenderAriaDescription
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onRenderAriaDescription?: IRenderFunction<IButtonProps>;'
      return:
        type:
          - IRenderFunction<IButtonProps>
  - uid: office-ui-fabric-react.IButtonProps.onRenderChildren
    summary: Custom render function for rendering the button children.
    name: onRenderChildren
    fullName: onRenderChildren
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onRenderChildren?: IRenderFunction<IButtonProps>;'
      return:
        type:
          - IRenderFunction<IButtonProps>
  - uid: office-ui-fabric-react.IButtonProps.onRenderDescription
    summary: Custom render function for the desciption text.
    name: onRenderDescription
    fullName: onRenderDescription
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onRenderDescription?: IRenderFunction<IButtonProps>;'
      return:
        type:
          - IRenderFunction<IButtonProps>
  - uid: office-ui-fabric-react.IButtonProps.onRenderIcon
    summary: Custom render function for the icon
    name: onRenderIcon
    fullName: onRenderIcon
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onRenderIcon?: IRenderFunction<IButtonProps>;'
      return:
        type:
          - IRenderFunction<IButtonProps>
  - uid: office-ui-fabric-react.IButtonProps.onRenderMenu
    summary: 'Deprecated at v6.3.2, to be removed at &gt;<!-- -->= v7.0.0. Use `menuAs` instead.'
    deprecated:
      content: Use `menuAs` instead.
    name: onRenderMenu
    fullName: onRenderMenu
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onRenderMenu?: IRenderFunction<IContextualMenuProps>;'
      return:
        type:
          - IRenderFunction<IContextualMenuProps>
  - uid: office-ui-fabric-react.IButtonProps.onRenderMenuIcon
    summary: Custom render function for button menu icon
    name: onRenderMenuIcon
    fullName: onRenderMenuIcon
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onRenderMenuIcon?: IRenderFunction<IButtonProps>;'
      return:
        type:
          - IRenderFunction<IButtonProps>
  - uid: office-ui-fabric-react.IButtonProps.onRenderText
    summary: Custom render function for the label text.
    name: onRenderText
    fullName: onRenderText
    langs:
      - typeScript
    type: property
    syntax:
      content: 'onRenderText?: IRenderFunction<IButtonProps>;'
      return:
        type:
          - IRenderFunction<IButtonProps>
  - uid: office-ui-fabric-react.IButtonProps.persistMenu
    summary: >-
      Menu will not be created or destroyed when opened or closed, instead it will be hidden. This will improve perf of
      the menu opening but could potentially impact overall perf by having more elemnts in the dom. Should only be used
      when perf is important. Note: This may increase the amount of time it takes for the button itself to mount.
    name: persistMenu
    fullName: persistMenu
    langs:
      - typeScript
    type: property
    syntax:
      content: 'persistMenu?: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.IButtonProps.primary
    summary: Changes the visual presentation of the button to be emphasized (if defined)
    name: primary
    fullName: primary
    langs:
      - typeScript
    type: property
    syntax:
      content: 'primary?: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.IButtonProps.primaryDisabled
    summary: If set to true and if this is a splitButton (split == true) then the primary action of a split button is disabled.
    name: primaryDisabled
    fullName: primaryDisabled
    langs:
      - typeScript
    type: property
    syntax:
      content: 'primaryDisabled?: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.IButtonProps.rootProps
    summary: >-
      Deprecated at v0.56.2, to be removed at &gt;<!-- -->= v1.0.0. Just pass in button props instead. they will be
      mixed into the button/anchor element rendered by the component.
    deprecated:
      content: Use button props instead.
    name: rootProps
    fullName: rootProps
    langs:
      - typeScript
    type: property
    syntax:
      content: 'rootProps?: React.ButtonHTMLAttributes<HTMLButtonElement> | React.AnchorHTMLAttributes<HTMLAnchorElement>;'
      return:
        type:
          - React.ButtonHTMLAttributes<HTMLButtonElement> | React.AnchorHTMLAttributes<HTMLAnchorElement>
  - uid: office-ui-fabric-react.IButtonProps.secondaryText
    summary: Description of the action this button takes. Only used for compound buttons
    name: secondaryText
    fullName: secondaryText
    langs:
      - typeScript
    type: property
    syntax:
      content: 'secondaryText?: string;'
      return:
        type:
          - string
  - uid: office-ui-fabric-react.IButtonProps.split
    summary: >-
      If set to true, and if menuProps and onClick are provided, the button will render as a SplitButton. Defaults to
      false.
    name: split
    fullName: split
    langs:
      - typeScript
    type: property
    syntax:
      content: 'split?: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.IButtonProps.splitButtonAriaLabel
    summary: Accessible label for the dropdown chevron button if this button is split.
    name: splitButtonAriaLabel
    fullName: splitButtonAriaLabel
    langs:
      - typeScript
    type: property
    syntax:
      content: 'splitButtonAriaLabel?: string;'
      return:
        type:
          - string
  - uid: office-ui-fabric-react.IButtonProps.styles
    summary: Custom styling for individual elements within the button DOM.
    name: styles
    fullName: styles
    langs:
      - typeScript
    type: property
    syntax:
      content: 'styles?: IButtonStyles;'
      return:
        type:
          - office-ui-fabric-react.IButtonStyles
  - uid: office-ui-fabric-react.IButtonProps.text
    summary: >-
      Text to render button label. If text is supplied, it will override any string in button children. Other children
      components will be passed through after the text.
    name: text
    fullName: text
    langs:
      - typeScript
    type: property
    syntax:
      content: 'text?: string;'
      return:
        type:
          - string
  - uid: office-ui-fabric-react.IButtonProps.theme
    summary: Theme provided by HOC.
    name: theme
    fullName: theme
    langs:
      - typeScript
    type: property
    syntax:
      content: 'theme?: ITheme;'
      return:
        type:
          - styling.ITheme
  - uid: office-ui-fabric-react.IButtonProps.toggle
    summary: >-
      Whether button is a toggle button with distinct on and off states. This should be true for buttons that
      permanently change state when a press event finishes, such as a volume mute button.
    name: toggle
    fullName: toggle
    langs:
      - typeScript
    type: property
    syntax:
      content: 'toggle?: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.IButtonProps.toggled
    summary: 'Any custom data the developer wishes to associate with the menu item. Deprecated, use `checked` if setting state.'
    deprecated:
      content: 'unused, use `checked` if setting state.'
    name: toggled
    fullName: toggled
    langs:
      - typeScript
    type: property
    syntax:
      content: 'toggled?: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.IButtonProps.uniqueId
    summary: Unique id to identify the item. Typically a duplicate of key value.
    name: uniqueId
    fullName: uniqueId
    langs:
      - typeScript
    type: property
    syntax:
      content: 'uniqueId?: string | number;'
      return:
        type:
          - string | number
