### YamlMime:UniversalReference
items:
  - uid: utilities
    name: '@uifabric/utilities'
    fullName: '@uifabric/utilities'
    langs:
      - typeScript
    type: package
    children:
      - utilities.addDirectionalKeyCode
      - utilities.addElementAtIndex
      - utilities.appendFunction
      - utilities.arraysEqual
      - utilities.asAsync
      - utilities.assertNever
      - utilities.assign
      - utilities.Async
      - utilities.autobind
      - utilities.AutoScroll
      - utilities.BaseComponent
      - utilities.calculatePrecision
      - utilities.classNamesFunction
      - utilities.createArray
      - utilities.createRef
      - utilities.css
      - utilities.customizable
      - utilities.Customizations
      - utilities.Customizer
      - utilities.DelayedRender
      - utilities.disableBodyScroll
      - utilities.doesElementContainFocus
      - utilities.elementContains
      - utilities.elementContainsAttribute
      - utilities.enableBodyScroll
      - utilities.EventGroup
      - utilities.extendComponent
      - utilities.FabricPerformance
      - utilities.filteredAssign
      - utilities.find
      - utilities.findElementRecursive
      - utilities.findIndex
      - utilities.findScrollableParent
      - utilities.fitContentToBounds
      - utilities.flatten
      - utilities.focusAsync
      - utilities.focusFirstChild
      - utilities.format
      - utilities.getChildren
      - utilities.getDistanceBetweenPoints
      - utilities.getDocument
      - utilities.getElementIndexPath
      - utilities.getFirstFocusable
      - utilities.getFirstTabbable
      - utilities.getFocusableByIndexPath
      - utilities.getId
      - utilities.getInitials
      - utilities.getLanguage
      - utilities.getLastFocusable
      - utilities.getLastTabbable
      - utilities.getNativeProps
      - utilities.getNextElement
      - utilities.getParent
      - utilities.getPreviousElement
      - utilities.getRect
      - utilities.getResourceUrl
      - utilities.getRTL
      - utilities.getRTLSafeKeyCode
      - utilities.getScrollbarWidth
      - utilities.getVirtualParent
      - utilities.getWindow
      - utilities.GlobalSettings
      - utilities.hasHorizontalOverflow
      - utilities.hasOverflow
      - utilities.hasVerticalOverflow
      - utilities.hoistMethods
      - utilities.hoistStatics
      - utilities.IAsAsyncOptions
      - utilities.IBaseProps
      - utilities.IChangeDescription
      - utilities.IChangeEventCallback
      - utilities.ICustomizableProps
      - utilities.ICustomizations
      - utilities.ICustomizerContext
      - utilities.IDelayedRenderProps
      - utilities.IDisposable
      - utilities.IFitContentToBoundsOptions
      - utilities.initializeComponentRef
      - utilities.initializeFocusRects
      - utilities.IPoint
      - utilities.IPropsWithStyles
      - utilities.IRectangle
      - utilities.IRenderComponent
      - utilities.IRenderFunction
      - utilities.isDirectionalKeyCode
      - utilities.isElementFocusSubZone
      - utilities.isElementFocusZone
      - utilities.isElementTabbable
      - utilities.isElementVisible
      - utilities.ISize
      - utilities.isMac
      - utilities.isVirtualElement
      - utilities.IVirtualElement
      - utilities.mapEnumByName
      - utilities.memoize
      - utilities.memoizeFunction
      - utilities.merge
      - utilities.mergeAriaAttributeValues
      - utilities.mergeCustomizations
      - utilities.mergeScopedSettings
      - utilities.mergeSettings
      - utilities.nullRender
      - utilities.on
      - utilities.portalContainsElement
      - utilities.precisionRound
      - utilities.raiseClick
      - utilities.Rectangle
      - utilities.removeIndex
      - utilities.replaceElement
      - utilities.resetIds
      - utilities.resetMemoizations
      - utilities.setBaseUrl
      - utilities.setLanguage
      - utilities.setPortalAttribute
      - utilities.setRTL
      - utilities.setSSR
      - utilities.setVirtualParent
      - utilities.setWarningCallback
      - utilities.shallowCompare
      - utilities.shouldWrapFocus
      - utilities.styled
      - utilities.toMatrix
      - utilities.unhoistMethods
      - utilities.values
      - utilities.warn
      - utilities.warnConditionallyRequiredProps
      - utilities.warnDeprecations
      - utilities.warnMutuallyExclusive
  - uid: utilities.addDirectionalKeyCode
    summary: >-
      Adds a keycode to the list of keys that, when pressed, should cause the focus outlines to be visible. This can be
      used to add global shortcut keys that directionally move from section to section within an app or between focus
      trap zones.
    name: addDirectionalKeyCode(which)
    fullName: addDirectionalKeyCode(which)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function addDirectionalKeyCode(which: number): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: which
          description: ''
          type:
            - number
  - uid: utilities.addElementAtIndex
    summary: 'Given an array, this function returns a new array where an element has been inserted at the given index.'
    name: 'addElementAtIndex(array, index, itemToAdd)'
    fullName: 'addElementAtIndex(array, index, itemToAdd)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function addElementAtIndex<T>(array: T[], index: number, itemToAdd: T): T[];'
      return:
        type:
          - 'T[]'
        description: ''
      parameters:
        - id: array
          description: The array to operate on
          type:
            - 'T[]'
        - id: index
          description: The index where an element should be inserted
          type:
            - number
        - id: itemToAdd
          description: The element to insert
          type:
            - T
  - uid: utilities.appendFunction
    summary: Returns a single function which will call each of the given functions in the context of the parent.
    name: 'appendFunction(parent, functions)'
    fullName: 'appendFunction(parent, functions)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function appendFunction(parent: any, ...functions: (any)[]): () => void;'
      return:
        type:
          - () => void
        description: ''
      parameters:
        - id: parent
          description: ''
          type:
            - any
        - id: functions
          description: ''
          type:
            - '(any)[]'
  - uid: utilities.arraysEqual
    summary: Returns a boolean indicating if the two given arrays are equal in length and values.
    name: 'arraysEqual(array1, array2)'
    fullName: 'arraysEqual(array1, array2)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function arraysEqual<T>(array1: T[], array2: T[]): boolean;'
      return:
        type:
          - boolean
        description: 'True if the arrays are the same length and have the same values in the same positions, false otherwise.'
      parameters:
        - id: array1
          description: First array to compare
          type:
            - 'T[]'
        - id: array2
          description: Second array to compare
          type:
            - 'T[]'
  - uid: utilities.asAsync
    summary: >-
      Produces a component which internally loads the target component before first mount. The component passes all
      props through to the loaded component.


      This overload accepts a module with a default export for the component.
    name: asAsync(options)
    fullName: asAsync(options)
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function asAsync<TProps>(options: IAsAsyncOptions<TProps>):
        React.ForwardRefExoticComponent<React.PropsWithoutRef<TProps & {
            asyncPlaceholder?: React.ReactType;
        }>>;
      return:
        type:
          - |-
            React.ForwardRefExoticComponent<React.PropsWithoutRef<TProps & {
                asyncPlaceholder?: React.ReactType;
            }>>
        description: ''
      parameters:
        - id: options
          description: ''
          type:
            - IAsAsyncOptions<TProps>
  - uid: utilities.assertNever
    summary: AssertNever is a utility function that can be used for exhaustiveness checks in switch statements.
    name: assertNever(x)
    fullName: assertNever(x)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function assertNever(x: never): never;'
      return:
        type:
          - never
        description: ''
      parameters:
        - id: x
          description: ''
          type:
            - never
  - uid: utilities.assign
    summary: >-
      Makes a resulting merge of a bunch of objects. Pass in the target object followed by 1 or more objects as
      arguments and they will be merged sequentially into the target. Note that this will shallow merge; it will not
      create new cloned values for target members.
    name: 'assign(target, args)'
    fullName: 'assign(target, args)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function assign(target: any, ...args: any[]): any;'
      return:
        type:
          - any
        description: Resulting merged target.
      parameters:
        - id: target
          description: Target object to merge following object arguments into.
          type:
            - any
        - id: args
          description: One or more objects that will be mixed into the target in the order they are provided.
          type:
            - 'any[]'
  - uid: utilities.autobind
    summary: >-
      Autobind is a utility for binding methods in a class. This simplifies tagging methods as being "bound" to the this
      pointer so that they can be used in scenarios that simply require a function callback.
    deprecated:
      content: This has been deprecated in favor of using arrow function properties
    name: 'autobind(target, key, descriptor)'
    fullName: 'autobind(target, key, descriptor)'
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function autobind<T extends Function>(target: any, key: string, descriptor:
        TypedPropertyDescriptor<T>): {
            configurable: boolean;
            get(): T;
            set(newValue: any): void;
        } | void;
      return:
        type:
          - |-
            {
                configurable: boolean;
                get(): T;
                set(newValue: any): void;
            } | void
        description: ''
      parameters:
        - id: target
          description: ''
          type:
            - any
        - id: key
          description: ''
          type:
            - string
        - id: descriptor
          description: ''
          type:
            - TypedPropertyDescriptor<T>
  - uid: utilities.calculatePrecision
    summary: >-
      Calculates a number's precision based on the number of trailing zeros if the number does not have a decimal
      indicated by a negative precision. Otherwise, it calculates the number of digits after the decimal point indicated
      by a positive precision.
    name: calculatePrecision(value)
    fullName: calculatePrecision(value)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function calculatePrecision(value: number | string): number;'
      return:
        type:
          - number
        description: ''
      parameters:
        - id: value
          description: the value to determine the precision of
          type:
            - number | string
  - uid: utilities.classNamesFunction
    summary: 'Creates a getClassNames function which calls getStyles given the props, and injects them into mergeStyleSets.'
    name: classNamesFunction()
    fullName: classNamesFunction()
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function classNamesFunction<TStyleProps extends {}, TStyleSet extends IStyleSet<TStyleSet>>():
        (getStyles: IStyleFunctionOrObject<TStyleProps, TStyleSet> | undefined, styleProps?: TStyleProps) =>
        IProcessedStyleSet<TStyleSet>;
      return:
        type:
          - >-
            (getStyles: IStyleFunctionOrObject<TStyleProps, TStyleSet> | undefined, styleProps?: TStyleProps) =>
            IProcessedStyleSet<TStyleSet>
        description: ''
  - uid: utilities.createArray
    summary: Creates an array of a given size and helper method to populate.
    name: 'createArray(size, getItem)'
    fullName: 'createArray(size, getItem)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function createArray<T>(size: number, getItem: (index: number) => T): T[];'
      return:
        type:
          - 'T[]'
        description: ''
      parameters:
        - id: size
          description: Size of array.
          type:
            - number
        - id: getItem
          description: Callback to populate given cell index.
          type:
            - '(index: number) => T'
  - uid: utilities.createRef
    deprecated:
      content: Use React.createRef. May be removed in 6 months (Jan '19).
    name: createRef()
    fullName: createRef()
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function createRef<T>(): RefObject<T>;'
      return:
        type:
          - RefObject<T>
        description: ''
  - uid: utilities.css
    summary: 'Concatination helper, which can merge class names together. Skips over falsey values.'
    name: css(args)
    fullName: css(args)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function css(...args: ICssInput[]): string;'
      return:
        type:
          - string
        description: ''
      parameters:
        - id: args
          description: ''
          type:
            - 'ICssInput[]'
  - uid: utilities.customizable
    name: 'customizable(scope, fields, concatStyles)'
    fullName: 'customizable(scope, fields, concatStyles)'
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function customizable(scope: string, fields: string[], concatStyles?: boolean):
        <P>(ComposedComponent: React.ComponentType<P>) => any;
      return:
        type:
          - '<P>(ComposedComponent: React.ComponentType<P>) => any'
        description: ''
      parameters:
        - id: scope
          description: ''
          type:
            - string
        - id: fields
          description: ''
          type:
            - 'string[]'
        - id: concatStyles
          description: ''
          type:
            - boolean
  - uid: utilities.disableBodyScroll
    summary: Disables the body scrolling.
    name: disableBodyScroll()
    fullName: disableBodyScroll()
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function disableBodyScroll(): void;'
      return:
        type:
          - void
        description: ''
  - uid: utilities.doesElementContainFocus
    summary: 'Determines if an element, or any of its children, contain focus.'
    name: doesElementContainFocus(element)
    fullName: doesElementContainFocus(element)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function doesElementContainFocus(element: HTMLElement): boolean;'
      return:
        type:
          - boolean
        description: ''
      parameters:
        - id: element
          description: ''
          type:
            - HTMLElement
  - uid: utilities.elementContains
    summary: >-
      Determines whether or not a parent element contains a given child element. If `allowVirtualParents` is true, this
      method may return `true` if the child has the parent in its virtual element hierarchy.
    name: 'elementContains(parent, child, allowVirtualParents)'
    fullName: 'elementContains(parent, child, allowVirtualParents)'
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function elementContains(parent: HTMLElement | null, child: HTMLElement | null,
        allowVirtualParents?: boolean): boolean;
      return:
        type:
          - boolean
        description: ''
      parameters:
        - id: parent
          description: ''
          type:
            - HTMLElement | null
        - id: child
          description: ''
          type:
            - HTMLElement | null
        - id: allowVirtualParents
          description: ''
          type:
            - boolean
  - uid: utilities.elementContainsAttribute
    summary: 'Determines if an element, or any of its ancestors, contain the given attribute'
    name: 'elementContainsAttribute(element, attribute)'
    fullName: 'elementContainsAttribute(element, attribute)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function elementContainsAttribute(element: HTMLElement, attribute: string): string | null;'
      return:
        type:
          - string | null
        description: the value of the first instance found
      parameters:
        - id: element
          description: element to start searching at
          type:
            - HTMLElement
        - id: attribute
          description: the attribute to search for
          type:
            - string
  - uid: utilities.enableBodyScroll
    summary: Enables the body scrolling.
    name: enableBodyScroll()
    fullName: enableBodyScroll()
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function enableBodyScroll(): void;'
      return:
        type:
          - void
        description: ''
  - uid: utilities.extendComponent
    summary: Extends a component's lifetime methods by appending new functions to the existing lifetime functions.
    name: 'extendComponent(parent, methods)'
    fullName: 'extendComponent(parent, methods)'
    langs:
      - typeScript
    type: function
    syntax:
      content: |-
        export declare function extendComponent<T extends React.Component>(parent: T, methods: {
            [key in keyof T]?: T[key];
        }): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: parent
          description: ''
          type:
            - T
        - id: methods
          description: ''
          type:
            - |-
              {
                  [key in keyof T]?: T[key];
              }
  - uid: utilities.filteredAssign
    summary: >-
      Makes a resulting merge of a bunch of objects, but allows a filter function to be passed in to filter the
      resulting merges. This allows for scenarios where you want to merge "everything except that one thing" or
      "properties that start with data-". Note that this will shallow merge; it will not create new cloned values for
      target members.
    name: 'filteredAssign(isAllowed, target, args)'
    fullName: 'filteredAssign(isAllowed, target, args)'
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function filteredAssign(isAllowed: (propName: string) => boolean, target: any, ...args: any[]):
        any;
      return:
        type:
          - any
        description: Resulting merged target.
      parameters:
        - id: isAllowed
          description: Callback to determine if the given propName is allowed in the result.
          type:
            - '(propName: string) => boolean'
        - id: target
          description: Target object to merge following object arguments into.
          type:
            - any
        - id: args
          description: One or more objects that will be mixed into the target in the order they are provided.
          type:
            - 'any[]'
  - uid: utilities.find
    summary: Helper to find the first item within an array that satisfies the callback.
    name: 'find(array, cb)'
    fullName: 'find(array, cb)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function find<T>(array: T[], cb: (item: T, index: number) => boolean): T | undefined;'
      return:
        type:
          - T | undefined
        description: ''
      parameters:
        - id: array
          description: Array to search
          type:
            - 'T[]'
        - id: cb
          description: Callback which returns true on matches
          type:
            - '(item: T, index: number) => boolean'
  - uid: utilities.findElementRecursive
    summary: Finds the first parent element where the matchFunction returns true
    name: 'findElementRecursive(element, matchFunction)'
    fullName: 'findElementRecursive(element, matchFunction)'
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function findElementRecursive(element: HTMLElement | null, matchFunction: (element: HTMLElement)
        => boolean): HTMLElement | null;
      return:
        type:
          - HTMLElement | null
        description: the matched element or null no match was found
      parameters:
        - id: element
          description: element to start searching at
          type:
            - HTMLElement | null
        - id: matchFunction
          description: the function that determines if the element is a match
          type:
            - '(element: HTMLElement) => boolean'
  - uid: utilities.findIndex
    summary: 'Helper to find the index of an item within an array, using a callback to determine the match.'
    name: 'findIndex(array, cb)'
    fullName: 'findIndex(array, cb)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function findIndex<T>(array: T[], cb: (item: T, index: number) => boolean): number;'
      return:
        type:
          - number
        description: ''
      parameters:
        - id: array
          description: Array to search.
          type:
            - 'T[]'
        - id: cb
          description: Callback which returns true on matches.
          type:
            - '(item: T, index: number) => boolean'
  - uid: utilities.findScrollableParent
    summary: 'Traverses up the DOM for the element with the data-is-scrollable=true attribute, or returns document.body.'
    name: findScrollableParent(startingElement)
    fullName: findScrollableParent(startingElement)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function findScrollableParent(startingElement: HTMLElement | null): HTMLElement | null;'
      return:
        type:
          - HTMLElement | null
        description: ''
      parameters:
        - id: startingElement
          description: ''
          type:
            - HTMLElement | null
  - uid: utilities.fitContentToBounds
    summary: >-
      Produces a proportionally-scaled version of an input content size when fit to a bounding size. Given a
      `contentSize` and a `boundsSize`<!-- -->, this function scales `contentSize` proportionally using either `contain`
      or `cover` fit behaviors. Use this function to pre-calculate the layout for the CSS `object-fit` and
      `background-fit` behaviors. With `contain`<!-- -->, the output size must be the largest it can be while completely
      within the `boundsSize`<!-- -->. With `cover`<!-- -->, the output size must be the smallest it can be while
      completely around the `boundsSize`<!-- -->. By default, there is a `maxScale` value of 1, which prevents the
      `contentSize` from being scaled larger.
    name: fitContentToBounds(options)
    fullName: fitContentToBounds(options)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function fitContentToBounds(options: IFitContentToBoundsOptions): ISize;'
      return:
        type:
          - utilities.ISize
        description: ''
      parameters:
        - id: options
          description: the options for the bounds fit operation
          type:
            - utilities.IFitContentToBoundsOptions
  - uid: utilities.flatten
    summary: 'Given an array where each element is of type T or T\[\], flatten it into an array of T'
    name: flatten(array)
    fullName: flatten(array)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function flatten<T>(array: (T | T[])[]): T[];'
      return:
        type:
          - 'T[]'
        description: ''
      parameters:
        - id: array
          description: The array where each element can optionally also be an array
          type:
            - '(T | T[])[]'
  - uid: utilities.focusAsync
    summary: >-
      Sets focus to an element asynchronously. The focus will be set at the next browser repaint, meaning it won't cause
      any extra recalculations. If more than one focusAsync is called during one frame, only the latest called
      focusAsync element will actually be focused
    name: focusAsync(element)
    fullName: focusAsync(element)
    langs:
      - typeScript
    type: function
    syntax:
      content: |-
        export declare function focusAsync(element: HTMLElement | {
            focus: () => void;
        } | undefined | null): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: element
          description: The element to focus
          type:
            - |-
              HTMLElement | {
                  focus: () => void;
              } | undefined | null
  - uid: utilities.focusFirstChild
    summary: Attempts to focus the first focusable element that is a child or child's child of the rootElement.
    name: focusFirstChild(rootElement)
    fullName: focusFirstChild(rootElement)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function focusFirstChild(rootElement: HTMLElement): boolean;'
      return:
        type:
          - boolean
        description: 'True if focus was set, false if it was not.'
      parameters:
        - id: rootElement
          description: Element to start the search for a focusable child.
          type:
            - HTMLElement
  - uid: utilities.format
    summary: >-
      String format method, used for scenarios where at runtime you need to evaluate a formatted string given a
      tokenized string. This usually only is needed in localization scenarios.
    name: 'format(s, values)'
    fullName: 'format(s, values)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function format(s: string, ...values: any[]): string;'
      return:
        type:
          - string
        description: ''
      parameters:
        - id: s
          description: ''
          type:
            - string
        - id: values
          description: ''
          type:
            - 'any[]'
  - uid: utilities.getChildren
    summary: >-
      Gets the elements which are child elements of the given element. If `allowVirtualChildren` is `true`<!-- -->, this
      method enumerates virtual child elements after the original children.
    name: 'getChildren(parent, allowVirtualChildren)'
    fullName: 'getChildren(parent, allowVirtualChildren)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function getChildren(parent: HTMLElement, allowVirtualChildren?: boolean): HTMLElement[];'
      return:
        type:
          - 'HTMLElement[]'
        description: ''
      parameters:
        - id: parent
          description: The element to get the children of.
          type:
            - HTMLElement
        - id: allowVirtualChildren
          description: true if the method should enumerate virtual child elements.
          type:
            - boolean
  - uid: utilities.getDistanceBetweenPoints
    summary: Determines the distance between two points.
    name: 'getDistanceBetweenPoints(point1, point2)'
    fullName: 'getDistanceBetweenPoints(point1, point2)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function getDistanceBetweenPoints(point1: IPoint, point2: IPoint): number;'
      return:
        type:
          - number
        description: ''
      parameters:
        - id: point1
          description: ''
          type:
            - utilities.IPoint
        - id: point2
          description: ''
          type:
            - utilities.IPoint
  - uid: utilities.getDocument
    summary: >-
      Helper to get the document object. Note that in popup window cases, document might be the wrong document, which is
      why we look at ownerDocument for the truth. Also note that the SSR flag is used to test ssr scenarios even if
      document is defined (from JSDOM for example.)
    name: getDocument(rootElement)
    fullName: getDocument(rootElement)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function getDocument(rootElement?: HTMLElement | null): Document | undefined;'
      return:
        type:
          - Document | undefined
        description: ''
      parameters:
        - id: rootElement
          description: ''
          type:
            - HTMLElement | null
  - uid: utilities.getElementIndexPath
    summary: >-
      Finds the element index path from a parent element to a child element.


      If you had this node structure: "A has children \[B, C\] and C has child D", the index path from A to D would be
      \[1, 0\], or `parent.chidren[1].children[0]`<!-- -->.
    name: 'getElementIndexPath(fromElement, toElement)'
    fullName: 'getElementIndexPath(fromElement, toElement)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function getElementIndexPath(fromElement: HTMLElement, toElement: HTMLElement): number[];'
      return:
        type:
          - 'number[]'
        description: ''
      parameters:
        - id: fromElement
          description: ''
          type:
            - HTMLElement
        - id: toElement
          description: ''
          type:
            - HTMLElement
  - uid: utilities.getFirstFocusable
    summary: Gets the first focusable element.
    name: 'getFirstFocusable(rootElement, currentElement, includeElementsInFocusZones)'
    fullName: 'getFirstFocusable(rootElement, currentElement, includeElementsInFocusZones)'
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function getFirstFocusable(rootElement: HTMLElement, currentElement: HTMLElement,
        includeElementsInFocusZones?: boolean): HTMLElement | null;
      return:
        type:
          - HTMLElement | null
        description: ''
      parameters:
        - id: rootElement
          description: ''
          type:
            - HTMLElement
        - id: currentElement
          description: ''
          type:
            - HTMLElement
        - id: includeElementsInFocusZones
          description: ''
          type:
            - boolean
  - uid: utilities.getFirstTabbable
    summary: >-
      Gets the first tabbable element. The difference between focusable and tabbable is that tabbable elements are
      focusable elements that also have tabIndex != -1.
    name: 'getFirstTabbable(rootElement, currentElement, includeElementsInFocusZones, checkNode)'
    fullName: 'getFirstTabbable(rootElement, currentElement, includeElementsInFocusZones, checkNode)'
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function getFirstTabbable(rootElement: HTMLElement, currentElement: HTMLElement,
        includeElementsInFocusZones?: boolean, checkNode?: boolean): HTMLElement | null;
      return:
        type:
          - HTMLElement | null
        description: ''
      parameters:
        - id: rootElement
          description: The parent element to search beneath.
          type:
            - HTMLElement
        - id: currentElement
          description: >-
            The descendant of rootElement to start the search at. This element is the first one checked, and iteration
            continues forward. Typical use passes rootElement.firstChild.
          type:
            - HTMLElement
        - id: includeElementsInFocusZones
          description: true if traversal should go into FocusZone descendants.
          type:
            - boolean
        - id: checkNode
          description: Include currentElement in search when true. Defaults to true.
          type:
            - boolean
  - uid: utilities.getFocusableByIndexPath
    summary: >-
      Finds the closest focusable element via an index path from a parent. See `getElementIndexPath` for getting an
      index path from an element to a child.
    name: 'getFocusableByIndexPath(parent, path)'
    fullName: 'getFocusableByIndexPath(parent, path)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function getFocusableByIndexPath(parent: HTMLElement, path: number[]): HTMLElement | undefined;'
      return:
        type:
          - HTMLElement | undefined
        description: ''
      parameters:
        - id: parent
          description: ''
          type:
            - HTMLElement
        - id: path
          description: ''
          type:
            - 'number[]'
  - uid: utilities.getId
    summary: Generates a unique id in the global scope (this spans across duplicate copies of the same library.)
    name: getId(prefix)
    fullName: getId(prefix)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function getId(prefix?: string): string;'
      return:
        type:
          - string
        description: ''
      parameters:
        - id: prefix
          description: ''
          type:
            - string
  - uid: utilities.getInitials
    summary: Get (up to 2 characters) initials based on display name of the persona.
    name: 'getInitials(displayName, isRtl, allowPhoneInitials)'
    fullName: 'getInitials(displayName, isRtl, allowPhoneInitials)'
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function getInitials(displayName: string | undefined | null, isRtl: boolean, allowPhoneInitials?:
        boolean): string;
      return:
        type:
          - string
        description: ''
      parameters:
        - id: displayName
          description: ''
          type:
            - string | undefined | null
        - id: isRtl
          description: ''
          type:
            - boolean
        - id: allowPhoneInitials
          description: ''
          type:
            - boolean
  - uid: utilities.getLanguage
    summary: Gets the rtl state of the page (returns true if in rtl.)
    name: getLanguage()
    fullName: getLanguage()
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function getLanguage(): string | null;'
      return:
        type:
          - string | null
        description: ''
  - uid: utilities.getLastFocusable
    summary: Gets the last focusable element.
    name: 'getLastFocusable(rootElement, currentElement, includeElementsInFocusZones)'
    fullName: 'getLastFocusable(rootElement, currentElement, includeElementsInFocusZones)'
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function getLastFocusable(rootElement: HTMLElement, currentElement: HTMLElement,
        includeElementsInFocusZones?: boolean): HTMLElement | null;
      return:
        type:
          - HTMLElement | null
        description: ''
      parameters:
        - id: rootElement
          description: ''
          type:
            - HTMLElement
        - id: currentElement
          description: ''
          type:
            - HTMLElement
        - id: includeElementsInFocusZones
          description: ''
          type:
            - boolean
  - uid: utilities.getLastTabbable
    summary: >-
      Gets the last tabbable element. The difference between focusable and tabbable is that tabbable elements are
      focusable elements that also have tabIndex != -1.
    name: 'getLastTabbable(rootElement, currentElement, includeElementsInFocusZones, checkNode)'
    fullName: 'getLastTabbable(rootElement, currentElement, includeElementsInFocusZones, checkNode)'
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function getLastTabbable(rootElement: HTMLElement, currentElement: HTMLElement,
        includeElementsInFocusZones?: boolean, checkNode?: boolean): HTMLElement | null;
      return:
        type:
          - HTMLElement | null
        description: ''
      parameters:
        - id: rootElement
          description: The parent element to search beneath.
          type:
            - HTMLElement
        - id: currentElement
          description: >-
            The descendant of rootElement to start the search at. This element is the first one checked, and iteration
            continues in reverse. Typical use passes rootElement.lastChild.
          type:
            - HTMLElement
        - id: includeElementsInFocusZones
          description: true if traversal should go into FocusZone descendants.
          type:
            - boolean
        - id: checkNode
          description: Include currentElement in search when true. Defaults to true.
          type:
            - boolean
  - uid: utilities.getNativeProps
    summary: >-
      Gets native supported props for an html element provided the allowance set. Use one of the property sets defined
      (divProperties, buttonPropertes, etc) to filter out supported properties from a given props set. Note that all
      data- and aria- prefixed attributes will be allowed. NOTE: getNativeProps should always be applied first when
      adding props to a react component. The non-native props should be applied second. This will prevent getNativeProps
      from overriding your custom props. For example, if props passed to getNativeProps has an onClick function and
      getNativeProps is added to the component after an onClick function is added, then the getNativeProps onClick will
      override it.
    name: 'getNativeProps(props, allowedPropNames, excludedPropNames)'
    fullName: 'getNativeProps(props, allowedPropNames, excludedPropNames)'
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function getNativeProps<T>(props: {}, allowedPropNames: string[], excludedPropNames?: string[]):
        T;
      return:
        type:
          - T
        description: The filtered props
      parameters:
        - id: props
          description: The unfiltered input props
          type:
            - '{}'
        - id: allowedPropNames
          description: ''
          type:
            - 'string[]'
        - id: excludedPropNames
          description: ''
          type:
            - 'string[]'
  - uid: utilities.getNextElement
    summary: 'Traverse to find the next focusable element. If tabbable is true, the element must have tabIndex != -1.'
    name: >-
      getNextElement(rootElement, currentElement, checkNode, suppressParentTraversal, suppressChildTraversal,
      includeElementsInFocusZones, allowFocusRoot, tabbable)
    fullName: >-
      getNextElement(rootElement, currentElement, checkNode, suppressParentTraversal, suppressChildTraversal,
      includeElementsInFocusZones, allowFocusRoot, tabbable)
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function getNextElement(rootElement: HTMLElement, currentElement: HTMLElement | null, checkNode?:
        boolean, suppressParentTraversal?: boolean, suppressChildTraversal?: boolean, includeElementsInFocusZones?:
        boolean, allowFocusRoot?: boolean, tabbable?: boolean): HTMLElement | null;
      return:
        type:
          - HTMLElement | null
        description: ''
      parameters:
        - id: rootElement
          description: ''
          type:
            - HTMLElement
        - id: currentElement
          description: ''
          type:
            - HTMLElement | null
        - id: checkNode
          description: Include currentElement in search when true.
          type:
            - boolean
        - id: suppressParentTraversal
          description: ''
          type:
            - boolean
        - id: suppressChildTraversal
          description: ''
          type:
            - boolean
        - id: includeElementsInFocusZones
          description: ''
          type:
            - boolean
        - id: allowFocusRoot
          description: ''
          type:
            - boolean
        - id: tabbable
          description: ''
          type:
            - boolean
  - uid: utilities.getParent
    summary: >-
      Gets the element which is the parent of a given element. If `allowVirtuaParents` is `true`<!-- -->, this method
      prefers the virtual parent over real DOM parent when present.
    name: 'getParent(child, allowVirtualParents)'
    fullName: 'getParent(child, allowVirtualParents)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function getParent(child: HTMLElement, allowVirtualParents?: boolean): HTMLElement | null;'
      return:
        type:
          - HTMLElement | null
        description: ''
      parameters:
        - id: child
          description: ''
          type:
            - HTMLElement
        - id: allowVirtualParents
          description: ''
          type:
            - boolean
  - uid: utilities.getPreviousElement
    summary: 'Traverse to find the previous element. If tabbable is true, the element must have tabIndex != -1.'
    name: >-
      getPreviousElement(rootElement, currentElement, checkNode, suppressParentTraversal, traverseChildren,
      includeElementsInFocusZones, allowFocusRoot, tabbable)
    fullName: >-
      getPreviousElement(rootElement, currentElement, checkNode, suppressParentTraversal, traverseChildren,
      includeElementsInFocusZones, allowFocusRoot, tabbable)
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function getPreviousElement(rootElement: HTMLElement, currentElement: HTMLElement | null,
        checkNode?: boolean, suppressParentTraversal?: boolean, traverseChildren?: boolean,
        includeElementsInFocusZones?: boolean, allowFocusRoot?: boolean, tabbable?: boolean): HTMLElement | null;
      return:
        type:
          - HTMLElement | null
        description: ''
      parameters:
        - id: rootElement
          description: ''
          type:
            - HTMLElement
        - id: currentElement
          description: ''
          type:
            - HTMLElement | null
        - id: checkNode
          description: ''
          type:
            - boolean
        - id: suppressParentTraversal
          description: ''
          type:
            - boolean
        - id: traverseChildren
          description: ''
          type:
            - boolean
        - id: includeElementsInFocusZones
          description: ''
          type:
            - boolean
        - id: allowFocusRoot
          description: ''
          type:
            - boolean
        - id: tabbable
          description: ''
          type:
            - boolean
  - uid: utilities.getRect
    summary: Helper to get bounding client rect. Passing in window will get the window size.
    name: getRect(element)
    fullName: getRect(element)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function getRect(element: HTMLElement | Window | null): IRectangle | undefined;'
      return:
        type:
          - IRectangle | undefined
        description: ''
      parameters:
        - id: element
          description: ''
          type:
            - HTMLElement | Window | null
  - uid: utilities.getResourceUrl
    summary: Sets the current base url used for fetching images.
    name: getResourceUrl(url)
    fullName: getResourceUrl(url)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function getResourceUrl(url: string): string;'
      return:
        type:
          - string
        description: ''
      parameters:
        - id: url
          description: ''
          type:
            - string
  - uid: utilities.getRTL
    summary: Gets the rtl state of the page (returns true if in rtl.)
    name: getRTL()
    fullName: getRTL()
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function getRTL(): boolean;'
      return:
        type:
          - boolean
        description: ''
  - uid: utilities.getRTLSafeKeyCode
    summary: 'Returns the given key, but flips right/left arrows if necessary.'
    name: getRTLSafeKeyCode(key)
    fullName: getRTLSafeKeyCode(key)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function getRTLSafeKeyCode(key: number): number;'
      return:
        type:
          - number
        description: ''
      parameters:
        - id: key
          description: ''
          type:
            - number
  - uid: utilities.getScrollbarWidth
    summary: Calculates the width of a scrollbar for the browser/os.
    name: getScrollbarWidth()
    fullName: getScrollbarWidth()
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function getScrollbarWidth(): number;'
      return:
        type:
          - number
        description: ''
  - uid: utilities.getVirtualParent
    summary: 'Gets the virtual parent given the child element, if it exists.'
    name: getVirtualParent(child)
    fullName: getVirtualParent(child)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function getVirtualParent(child: HTMLElement): HTMLElement | undefined;'
      return:
        type:
          - HTMLElement | undefined
        description: ''
      parameters:
        - id: child
          description: ''
          type:
            - HTMLElement
  - uid: utilities.getWindow
    summary: Helper to get the window object. Note that in popup scenarios the window object may not be the window use ex
    name: getWindow(rootElement)
    fullName: getWindow(rootElement)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function getWindow(rootElement?: Element | null): Window | undefined;'
      return:
        type:
          - Window | undefined
        description: ''
      parameters:
        - id: rootElement
          description: ''
          type:
            - Element | null
  - uid: utilities.hasHorizontalOverflow
    summary: Detects whether an element's content has horizontal overflow
    name: hasHorizontalOverflow(element)
    fullName: hasHorizontalOverflow(element)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function hasHorizontalOverflow(element: HTMLElement): boolean;'
      return:
        type:
          - boolean
        description: True if element's content overflows
      parameters:
        - id: element
          description: Element to check for overflow
          type:
            - HTMLElement
  - uid: utilities.hasOverflow
    summary: Detects whether an element's content has overflow in any direction
    name: hasOverflow(element)
    fullName: hasOverflow(element)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function hasOverflow(element: HTMLElement): boolean;'
      return:
        type:
          - boolean
        description: True if element's content overflows
      parameters:
        - id: element
          description: Element to check for overflow
          type:
            - HTMLElement
  - uid: utilities.hasVerticalOverflow
    summary: Detects whether an element's content has vertical overflow
    name: hasVerticalOverflow(element)
    fullName: hasVerticalOverflow(element)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function hasVerticalOverflow(element: HTMLElement): boolean;'
      return:
        type:
          - boolean
        description: True if element's content overflows
      parameters:
        - id: element
          description: Element to check for overflow
          type:
            - HTMLElement
  - uid: utilities.hoistMethods
    summary: 'Allows you to hoist methods, except those in an exclusion set from a source object into a destination object.'
    name: 'hoistMethods(destination, source, exclusions)'
    fullName: 'hoistMethods(destination, source, exclusions)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function hoistMethods(destination: any, source: any, exclusions?: string[]): string[];'
      return:
        type:
          - 'string[]'
        description: An array of names of methods that were hoisted.
      parameters:
        - id: destination
          description: The instance of the object to hoist the methods onto.
          type:
            - any
        - id: source
          description: The instance of the object where the methods are hoisted from.
          type:
            - any
        - id: exclusions
          description: (Optional) What methods to exclude from being hoisted.
          type:
            - 'string[]'
  - uid: utilities.hoistStatics
    summary: >-
      Allows you to hoist static functions in components. Created for the purpose of fixing broken static functions in
      classes that utilize decorators.
    name: 'hoistStatics(source, dest)'
    fullName: 'hoistStatics(source, dest)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function hoistStatics<TSource, TDest>(source: TSource, dest: TDest): TDest;'
      return:
        type:
          - TDest
        description: The dest object with methods added
      parameters:
        - id: source
          description: The object where the methods are hoisted from.
          type:
            - TSource
        - id: dest
          description: The object to hoist the methods onto.
          type:
            - TDest
  - uid: utilities.initializeComponentRef
    summary: >-
      Helper to manage componentRef resolution. Internally appends logic to lifetime methods to resolve componentRef to
      the passed in object.


      Usage: call initializeComponentRef(this) in the constructor,
    name: initializeComponentRef(obj)
    fullName: initializeComponentRef(obj)
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function initializeComponentRef<TProps extends IBaseProps, TState>(obj: React.Component<TProps,
        TState>): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: obj
          description: ''
          type:
            - 'React.Component<TProps, TState>'
  - uid: utilities.initializeFocusRects
    summary: >-
      Initializes the logic which:


      1. Subscribes keydown and mousedown events. (It will only do it once per window, so it's safe to call this method
      multiple times.) 2. When the user presses directional keyboard keys, adds the 'ms-Fabric--isFocusVisible'
      classname to the document body. 3. When the user clicks a mouse button, we remove the classname if it exists.


      This logic allows components on the page to conditionally render focus treatments only if the global classname
      exists, which simplifies logic overall.
    name: initializeFocusRects(window)
    fullName: initializeFocusRects(window)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function initializeFocusRects(window?: Window): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: window
          description: the window used to add the event listeners
          type:
            - Window
  - uid: utilities.isDirectionalKeyCode
    summary: Returns true if the keycode is a directional keyboard key.
    name: isDirectionalKeyCode(which)
    fullName: isDirectionalKeyCode(which)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function isDirectionalKeyCode(which: number): boolean;'
      return:
        type:
          - boolean
        description: ''
      parameters:
        - id: which
          description: ''
          type:
            - number
  - uid: utilities.isElementFocusSubZone
    summary: Determines if a given element is a focus sub zone.
    name: isElementFocusSubZone(element)
    fullName: isElementFocusSubZone(element)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function isElementFocusSubZone(element?: HTMLElement): boolean;'
      return:
        type:
          - boolean
        description: ''
      parameters:
        - id: element
          description: ''
          type:
            - HTMLElement
  - uid: utilities.isElementFocusZone
    summary: Determines if a given element is a focus zone.
    name: isElementFocusZone(element)
    fullName: isElementFocusZone(element)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function isElementFocusZone(element?: HTMLElement): boolean;'
      return:
        type:
          - boolean
        description: ''
      parameters:
        - id: element
          description: ''
          type:
            - HTMLElement
  - uid: utilities.isElementTabbable
    summary: >-
      Determines if an element can receive focus programmatically or via a mouse click. If checkTabIndex is true,
      additionally checks to ensure the element can be focused with the tab key, meaning tabIndex != -1.
    name: 'isElementTabbable(element, checkTabIndex)'
    fullName: 'isElementTabbable(element, checkTabIndex)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function isElementTabbable(element: HTMLElement, checkTabIndex?: boolean): boolean;'
      return:
        type:
          - boolean
        description: ''
      parameters:
        - id: element
          description: ''
          type:
            - HTMLElement
        - id: checkTabIndex
          description: ''
          type:
            - boolean
  - uid: utilities.isElementVisible
    summary: Determines if an element is visible.
    name: isElementVisible(element)
    fullName: isElementVisible(element)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function isElementVisible(element: HTMLElement | undefined | null): boolean;'
      return:
        type:
          - boolean
        description: ''
      parameters:
        - id: element
          description: ''
          type:
            - HTMLElement | undefined | null
  - uid: utilities.isMac
    summary: Returns true if the user is on a Mac. Caches the result value.
    name: isMac(reset)
    fullName: isMac(reset)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function isMac(reset?: boolean): boolean;'
      return:
        type:
          - boolean
        description: ''
      parameters:
        - id: reset
          description: Reset the cached result value (mainly for testing).
          type:
            - boolean
  - uid: utilities.isVirtualElement
    summary: Determines whether or not an element has the virtual hierarchy extension.
    name: isVirtualElement(element)
    fullName: isVirtualElement(element)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function isVirtualElement(element: HTMLElement | IVirtualElement): element is IVirtualElement;'
      return:
        type:
          - element is IVirtualElement
        description: ''
      parameters:
        - id: element
          description: ''
          type:
            - HTMLElement | IVirtualElement
  - uid: utilities.mapEnumByName
    name: 'mapEnumByName(theEnum, callback)'
    fullName: 'mapEnumByName(theEnum, callback)'
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function mapEnumByName<T>(theEnum: any, callback: (name?: string, value?: string | number) => T |
        undefined): (T | undefined)[] | undefined;
      return:
        type:
          - '(T | undefined)[] | undefined'
        description: ''
      parameters:
        - id: theEnum
          description: ''
          type:
            - any
        - id: callback
          description: ''
          type:
            - '(name?: string, value?: string | number) => T | undefined'
  - uid: utilities.memoize
    summary: >-
      Memoize decorator to be used on class methods. WARNING: the `this` reference will be inaccessible within a
      memoized method, given that a cached method's `this` would not be instance-specific.
    name: 'memoize(target, key, descriptor)'
    fullName: 'memoize(target, key, descriptor)'
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function memoize<T extends Function>(target: any, key: string, descriptor:
        TypedPropertyDescriptor<T>): {
            configurable: boolean;
            get(): T;
        };
      return:
        type:
          - |-
            {
                configurable: boolean;
                get(): T;
            }
        description: ''
      parameters:
        - id: target
          description: ''
          type:
            - any
        - id: key
          description: ''
          type:
            - string
        - id: descriptor
          description: ''
          type:
            - TypedPropertyDescriptor<T>
  - uid: utilities.memoizeFunction
    summary: >-
      Memoizes a function; when you pass in the same parameters multiple times, it returns a cached result. Be careful
      when passing in objects, you need to pass in the same INSTANCE for caching to work. Otherwise it will grow the
      cache unnecessarily. Also avoid using default values that evaluate functions; passing in undefined for a value and
      relying on a default function will execute it the first time, but will not re-evaluate subsequent times which may
      have been unexpected.


      By default, the cache will reset after 100 permutations, to avoid abuse cases where the function is unintendedly
      called with unique objects. Without a reset, the cache could grow infinitely, so we safeguard by resetting. To
      override this behavior, pass a value of 0 to the maxCacheSize parameter.
    name: 'memoizeFunction(cb, maxCacheSize)'
    fullName: 'memoizeFunction(cb, maxCacheSize)'
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function memoizeFunction<T extends (...args: any[]) => RET_TYPE, RET_TYPE>(cb: T, maxCacheSize?:
        number): T;
      return:
        type:
          - T
        description: A memoized version of the function.
      parameters:
        - id: cb
          description: The function to memoize.
          type:
            - T
        - id: maxCacheSize
          description: 'Max results to cache. If the cache exceeds this value, it will reset on the next call.'
          type:
            - number
  - uid: utilities.merge
    summary: >-
      Simple deep merge function. Takes all arguments and returns a deep copy of the objects merged together in the
      order provided. If an object creates a circular reference, it will assign the original reference.
    name: 'merge(target, args)'
    fullName: 'merge(target, args)'
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function merge<T = {}>(target: Partial<T>, ...args: (Partial<T> | null | undefined | false)[]):
        T;
      return:
        type:
          - T
        description: ''
      parameters:
        - id: target
          description: ''
          type:
            - Partial<T>
        - id: args
          description: ''
          type:
            - '(Partial<T> | null | undefined | false)[]'
  - uid: utilities.mergeAriaAttributeValues
    summary: >-
      ARIA helper to concatenate attributes, returning undefined if all attributes are undefined. (Empty strings are not
      a valid ARIA attribute value.)
    name: mergeAriaAttributeValues(ariaAttributes)
    fullName: mergeAriaAttributeValues(ariaAttributes)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function mergeAriaAttributeValues(...ariaAttributes: (string | undefined)[]): string | undefined;'
      return:
        type:
          - string | undefined
        description: ''
      parameters:
        - id: ariaAttributes
          description: ARIA attributes to merge
          type:
            - '(string | undefined)[]'
  - uid: utilities.mergeCustomizations
    summary: >-
      Merge props and customizations giving priority to props over context. NOTE: This function will always perform
      multiple merge operations. Use with caution.
    name: 'mergeCustomizations(props, parentContext)'
    fullName: 'mergeCustomizations(props, parentContext)'
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function mergeCustomizations(props: ICustomizerProps, parentContext: ICustomizerContext):
        ICustomizerContext;
      return:
        type:
          - utilities.ICustomizerContext
        description: Merged customizations.
      parameters:
        - id: props
          description: New settings to merge in.
          type:
            - ICustomizerProps
        - id: parentContext
          description: Context containing current settings.
          type:
            - utilities.ICustomizerContext
  - uid: utilities.mergeScopedSettings
    name: 'mergeScopedSettings(oldSettings, newSettings)'
    fullName: 'mergeScopedSettings(oldSettings, newSettings)'
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function mergeScopedSettings(oldSettings?: ISettings, newSettings?: ISettings |
        ISettingsFunction): ISettings;
      return:
        type:
          - ISettings
        description: ''
      parameters:
        - id: oldSettings
          description: ''
          type:
            - ISettings
        - id: newSettings
          description: ''
          type:
            - ISettings | ISettingsFunction
  - uid: utilities.mergeSettings
    summary: >-
      Merge new and old settings, giving priority to new settings. New settings is optional in which case oldSettings is
      returned as-is.
    name: 'mergeSettings(oldSettings, newSettings)'
    fullName: 'mergeSettings(oldSettings, newSettings)'
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function mergeSettings(oldSettings?: ISettings, newSettings?: ISettings | ISettingsFunction):
        ISettings;
      return:
        type:
          - ISettings
        description: Merged settings.
      parameters:
        - id: oldSettings
          description: Old settings to fall back to.
          type:
            - ISettings
        - id: newSettings
          description: New settings that will be merged over oldSettings.
          type:
            - ISettings | ISettingsFunction
  - uid: utilities.nullRender
    summary: 'Simple constant function for returning null, used to render empty templates in JSX.'
    name: nullRender()
    fullName: nullRender()
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function nullRender(): JSX.Element | null;'
      return:
        type:
          - JSX.Element | null
        description: ''
  - uid: utilities.on
    name: 'on(element, eventName, callback, options)'
    fullName: 'on(element, eventName, callback, options)'
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function on(element: Element | Window, eventName: string, callback: (ev: Event) => void,
        options?: boolean): () => void;
      return:
        type:
          - () => void
        description: ''
      parameters:
        - id: element
          description: ''
          type:
            - Element | Window
        - id: eventName
          description: ''
          type:
            - string
        - id: callback
          description: ''
          type:
            - '(ev: Event) => void'
        - id: options
          description: ''
          type:
            - boolean
  - uid: utilities.portalContainsElement
    summary: >-
      Determine whether a target is within a portal from perspective of root or optional parent. This function only
      works against portal components that use the setPortalAttribute function. If both parent and child are within the
      same portal this function will return false.
    name: 'portalContainsElement(target, parent)'
    fullName: 'portalContainsElement(target, parent)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function portalContainsElement(target: HTMLElement, parent?: HTMLElement): boolean;'
      return:
        type:
          - boolean
        description: ''
      parameters:
        - id: target
          description: Element to query portal containment status of.
          type:
            - HTMLElement
        - id: parent
          description: >-
            Optional parent perspective. Search for containing portal stops at parent (or root if parent is undefined or
            invalid.)
          type:
            - HTMLElement
  - uid: utilities.precisionRound
    summary: Rounds a number to a certain level of precision. Accepts negative precision.
    name: 'precisionRound(value, precision, base)'
    fullName: 'precisionRound(value, precision, base)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function precisionRound(value: number, precision: number, base?: number): number;'
      return:
        type:
          - number
        description: ''
      parameters:
        - id: value
          description: The value that is being rounded.
          type:
            - number
        - id: precision
          description: The number of decimal places to round the number to
          type:
            - number
        - id: base
          description: ''
          type:
            - number
  - uid: utilities.raiseClick
    summary: Raises a click event.
    name: raiseClick(target)
    fullName: raiseClick(target)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function raiseClick(target: Element): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: target
          description: ''
          type:
            - Element
  - uid: utilities.removeIndex
    summary: 'Given an array, it returns a new array that does not contain the item at the given index.'
    name: 'removeIndex(array, index)'
    fullName: 'removeIndex(array, index)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function removeIndex<T>(array: T[], index: number): T[];'
      return:
        type:
          - 'T[]'
        description: ''
      parameters:
        - id: array
          description: The array to operate on
          type:
            - 'T[]'
        - id: index
          description: The index of the element to remove
          type:
            - number
  - uid: utilities.replaceElement
    summary: 'Given an array, this function returns a new array where the element at a given index has been replaced.'
    name: 'replaceElement(array, newElement, index)'
    fullName: 'replaceElement(array, newElement, index)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function replaceElement<T>(array: T[], newElement: T, index: number): T[];'
      return:
        type:
          - 'T[]'
        description: ''
      parameters:
        - id: array
          description: The array to operate on
          type:
            - 'T[]'
        - id: newElement
          description: The element that will be placed in the new array
          type:
            - T
        - id: index
          description: The index of the element that should be replaced
          type:
            - number
  - uid: utilities.resetIds
    summary: Resets id counter to an (optional) number.
    name: resetIds(counter)
    fullName: resetIds(counter)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function resetIds(counter?: number): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: counter
          description: ''
          type:
            - number
  - uid: utilities.resetMemoizations
    summary: Reset memoizations.
    name: resetMemoizations()
    fullName: resetMemoizations()
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function resetMemoizations(): void;'
      return:
        type:
          - void
        description: ''
  - uid: utilities.setBaseUrl
    summary: Gets the current base url used for fetching images.
    name: setBaseUrl(baseUrl)
    fullName: setBaseUrl(baseUrl)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function setBaseUrl(baseUrl: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: baseUrl
          description: ''
          type:
            - string
  - uid: utilities.setLanguage
    summary: Sets the rtl state of the page (by adjusting the dir attribute of the html element.)
    name: 'setLanguage(language, avoidPersisting)'
    fullName: 'setLanguage(language, avoidPersisting)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function setLanguage(language: string, avoidPersisting?: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: language
          description: ''
          type:
            - string
        - id: avoidPersisting
          description: ''
          type:
            - boolean
  - uid: utilities.setPortalAttribute
    summary: Identify element as a portal by setting an attribute.
    name: setPortalAttribute(element)
    fullName: setPortalAttribute(element)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function setPortalAttribute(element: HTMLElement): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: element
          description: Element to mark as a portal.
          type:
            - HTMLElement
  - uid: utilities.setRTL
    summary: Sets the rtl state of the page (by adjusting the dir attribute of the html element.)
    name: 'setRTL(isRTL, persistSetting)'
    fullName: 'setRTL(isRTL, persistSetting)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function setRTL(isRTL: boolean, persistSetting?: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: isRTL
          description: ''
          type:
            - boolean
        - id: persistSetting
          description: ''
          type:
            - boolean
  - uid: utilities.setSSR
    summary: Helper to set ssr mode to simulate no window object returned from getWindow helper.
    name: setSSR(isEnabled)
    fullName: setSSR(isEnabled)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function setSSR(isEnabled: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: isEnabled
          description: ''
          type:
            - boolean
  - uid: utilities.setVirtualParent
    summary: Sets the virtual parent of an element. Pass `undefined` as the `parent` to clear the virtual parent.
    name: 'setVirtualParent(child, parent)'
    fullName: 'setVirtualParent(child, parent)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function setVirtualParent(child: HTMLElement, parent: HTMLElement): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: child
          description: ''
          type:
            - HTMLElement
        - id: parent
          description: ''
          type:
            - HTMLElement
  - uid: utilities.setWarningCallback
    summary: Configures the warning callback. Passing in undefined will reset it to use the default console.warn function.
    name: setWarningCallback(warningCallback)
    fullName: setWarningCallback(warningCallback)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function setWarningCallback(warningCallback?: (message: string) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: warningCallback
          description: Callback to override the generated warnings.
          type:
            - '(message: string) => void'
  - uid: utilities.shallowCompare
    summary: Compares a to b and b to a.
    name: 'shallowCompare(a, b)'
    fullName: 'shallowCompare(a, b)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function shallowCompare<TA, TB>(a: TA, b: TB): boolean;'
      return:
        type:
          - boolean
        description: ''
      parameters:
        - id: a
          description: ''
          type:
            - TA
        - id: b
          description: ''
          type:
            - TB
  - uid: utilities.shouldWrapFocus
    summary: 'Determines if an, or any of its ancestors, sepcificies that it doesn''t want focus to wrap'
    name: 'shouldWrapFocus(element, noWrapDataAttribute)'
    fullName: 'shouldWrapFocus(element, noWrapDataAttribute)'
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function shouldWrapFocus(element: HTMLElement, noWrapDataAttribute: 'data-no-vertical-wrap' |
        'data-no-horizontal-wrap'): boolean;
      return:
        type:
          - boolean
        description: 'true if focus should wrap, false otherwise'
      parameters:
        - id: element
          description: element to start searching from
          type:
            - HTMLElement
        - id: noWrapDataAttribute
          description: the no wrap data attribute to match (either)
          type:
            - '''data-no-vertical-wrap'' | ''data-no-horizontal-wrap'''
  - uid: utilities.styled
    summary: >-
      The styled HOC wrapper allows you to create a functional wrapper around a given component which will resolve
      getStyles functional props, and mix customized props passed in using concatStyleSets.
    name: 'styled(Component, baseStyles, getProps, customizable)'
    fullName: 'styled(Component, baseStyles, getProps, customizable)'
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function styled<TComponentProps extends IPropsWithStyles<TStyleProps, TStyleSet>, TStyleProps,
        TStyleSet extends IStyleSet<TStyleSet>>(Component: React.ComponentClass<TComponentProps> |
        React.StatelessComponent<TComponentProps>, baseStyles: IStyleFunctionOrObject<TStyleProps, TStyleSet>,
        getProps?: (props: TComponentProps) => Partial<TComponentProps>, customizable?: ICustomizableProps):
        React.StatelessComponent<TComponentProps>;
      return:
        type:
          - React.StatelessComponent<TComponentProps>
        description: ''
      parameters:
        - id: Component
          description: 'The unstyled base component to render, which receives styles.'
          type:
            - React.ComponentClass<TComponentProps> | React.StatelessComponent<TComponentProps>
        - id: baseStyles
          description: The styles which should be curried with the component.
          type:
            - 'IStyleFunctionOrObject<TStyleProps, TStyleSet>'
        - id: getProps
          description: A helper which provides default props.
          type:
            - '(props: TComponentProps) => Partial<TComponentProps>'
        - id: customizable
          description: An object which defines which props can be customized using the Customizer.
          type:
            - utilities.ICustomizableProps
  - uid: utilities.toMatrix
    summary: Convert the given array to a matrix with columnCount number of columns.
    name: 'toMatrix(items, columnCount)'
    fullName: 'toMatrix(items, columnCount)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function toMatrix<T>(items: T[], columnCount: number): T[][];'
      return:
        type:
          - 'T[][]'
        description: A matrix of items
      parameters:
        - id: items
          description: The array to convert
          type:
            - 'T[]'
        - id: columnCount
          description: The number of columns for the resulting matrix
          type:
            - number
  - uid: utilities.unhoistMethods
    summary: Provides a method for convenience to unhoist hoisted methods.
    name: 'unhoistMethods(source, methodNames)'
    fullName: 'unhoistMethods(source, methodNames)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function unhoistMethods(source: any, methodNames: string[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: source
          description: The source object upon which methods were hoisted.
          type:
            - any
        - id: methodNames
          description: An array of method names to unhoist.
          type:
            - 'string[]'
  - uid: utilities.values
    summary: Get all values in an object dictionary
    name: values(obj)
    fullName: values(obj)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function values<T>(obj: any): T[];'
      return:
        type:
          - 'T[]'
        description: ''
      parameters:
        - id: obj
          description: The dictionary to get values for
          type:
            - any
  - uid: utilities.warn
    summary: 'Sends a warning to console, if the api is present.'
    name: warn(message)
    fullName: warn(message)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function warn(message: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: message
          description: Warning message.
          type:
            - string
  - uid: utilities.warnConditionallyRequiredProps
    summary: Warns when props are required if a condition is met.
    name: 'warnConditionallyRequiredProps(componentName, props, requiredProps, conditionalPropName, condition)'
    fullName: 'warnConditionallyRequiredProps(componentName, props, requiredProps, conditionalPropName, condition)'
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function warnConditionallyRequiredProps<P>(componentName: string, props: P, requiredProps:
        string[], conditionalPropName: string, condition: boolean): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: componentName
          description: The name of the component being used.
          type:
            - string
        - id: props
          description: The props passed into the component.
          type:
            - P
        - id: requiredProps
          description: The name of the props that are required when the condition is met.
          type:
            - 'string[]'
        - id: conditionalPropName
          description: The name of the prop that the condition is based on.
          type:
            - string
        - id: condition
          description: Whether the condition is met.
          type:
            - boolean
  - uid: utilities.warnDeprecations
    summary: Warns when a deprecated props are being used.
    name: 'warnDeprecations(componentName, props, deprecationMap)'
    fullName: 'warnDeprecations(componentName, props, deprecationMap)'
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function warnDeprecations<P>(componentName: string, props: P, deprecationMap: ISettingsMap<P>):
        void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: componentName
          description: The name of the component being used.
          type:
            - string
        - id: props
          description: The props passed into the component.
          type:
            - P
        - id: deprecationMap
          description: 'The map of deprecations, where key is the prop name and the value is either null or a replacement prop name.'
          type:
            - ISettingsMap<P>
  - uid: utilities.warnMutuallyExclusive
    summary: Warns when two props which are mutually exclusive are both being used.
    name: 'warnMutuallyExclusive(componentName, props, exclusiveMap)'
    fullName: 'warnMutuallyExclusive(componentName, props, exclusiveMap)'
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function warnMutuallyExclusive<P>(componentName: string, props: P, exclusiveMap:
        ISettingsMap<P>): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: componentName
          description: The name of the component being used.
          type:
            - string
        - id: props
          description: The props passed into the component.
          type:
            - P
        - id: exclusiveMap
          description: 'A map where the key is a parameter, and the value is the other parameter.'
          type:
            - ISettingsMap<P>
references:
  - uid: utilities.Async
    name: Async
  - uid: utilities.AutoScroll
    name: AutoScroll
  - uid: utilities.BaseComponent
    name: BaseComponent
  - uid: utilities.Customizations
    name: Customizations
  - uid: utilities.Customizer
    name: Customizer
  - uid: utilities.DelayedRender
    name: DelayedRender
  - uid: utilities.EventGroup
    name: EventGroup
  - uid: utilities.FabricPerformance
    name: FabricPerformance
  - uid: utilities.GlobalSettings
    name: GlobalSettings
  - uid: utilities.IAsAsyncOptions
    name: IAsAsyncOptions
  - uid: utilities.IBaseProps
    name: IBaseProps
  - uid: utilities.IChangeDescription
    name: IChangeDescription
  - uid: utilities.IChangeEventCallback
    name: IChangeEventCallback
  - uid: utilities.ICustomizableProps
    name: ICustomizableProps
  - uid: utilities.ICustomizations
    name: ICustomizations
  - uid: utilities.ICustomizerContext
    name: ICustomizerContext
  - uid: utilities.IDelayedRenderProps
    name: IDelayedRenderProps
  - uid: utilities.IDisposable
    name: IDisposable
  - uid: utilities.IFitContentToBoundsOptions
    name: IFitContentToBoundsOptions
  - uid: utilities.IPoint
    name: IPoint
  - uid: utilities.IPropsWithStyles
    name: IPropsWithStyles
  - uid: utilities.IRectangle
    name: IRectangle
  - uid: utilities.IRenderComponent
    name: IRenderComponent
  - uid: utilities.IRenderFunction
    name: IRenderFunction
  - uid: utilities.ISize
    name: ISize
  - uid: utilities.IVirtualElement
    name: IVirtualElement
  - uid: utilities.Rectangle
    name: Rectangle
