### YamlMime:UniversalReference
items:
  - uid: utilities.EventGroup
    summary: >-
      An instance of EventGroup allows anything with a handle to it to trigger events on it. If the target is an
      HTMLElement, the event will be attached to the element and can be triggered as usual (like clicking for onclick).
      The event can be triggered by calling EventGroup.raise() here. If the target is an HTMLElement, the event gets
      raised and is handled by the browser. Otherwise, it gets handled here in EventGroup, and the handler is called in
      the context of the parent (which is passed in in the constructor).
    name: EventGroup
    fullName: EventGroup
    langs:
      - typeScript
    type: class
    package: utilities
    children:
      - utilities.EventGroup.(constructor)
      - utilities.EventGroup.declare
      - utilities.EventGroup.dispose
      - utilities.EventGroup.isDeclared
      - utilities.EventGroup.isObserved
      - utilities.EventGroup.off
      - utilities.EventGroup.on
      - utilities.EventGroup.onAll
      - utilities.EventGroup.raise
      - utilities.EventGroup.stopPropagation
  - uid: utilities.EventGroup.(constructor)
    summary: 'parent: the context in which events attached to non-HTMLElements are called'
    name: (constructor)(parent)
    fullName: (constructor)(parent)
    langs:
      - typeScript
    type: constructor
    syntax:
      content: 'constructor(parent: any);'
      parameters:
        - id: parent
          description: ''
          type:
            - any
  - uid: utilities.EventGroup.declare
    summary: Declare an event as being supported by this instance of EventGroup.
    name: declare(event)
    fullName: declare(event)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'declare(event: string | string[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: event
          description: ''
          type:
            - 'string | string[]'
  - uid: utilities.EventGroup.dispose
    name: dispose()
    fullName: dispose()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'dispose(): void;'
      return:
        type:
          - void
        description: ''
  - uid: utilities.EventGroup.isDeclared
    summary: Check to see if the target has declared support of the given event.
    name: 'isDeclared(target, eventName)'
    fullName: 'isDeclared(target, eventName)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static isDeclared(target: any, eventName: string): boolean;'
      return:
        type:
          - boolean
        description: ''
      parameters:
        - id: target
          description: ''
          type:
            - any
        - id: eventName
          description: ''
          type:
            - string
  - uid: utilities.EventGroup.isObserved
    name: 'isObserved(target, eventName)'
    fullName: 'isObserved(target, eventName)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static isObserved(target: any, eventName: string): boolean;'
      return:
        type:
          - boolean
        description: ''
      parameters:
        - id: target
          description: ''
          type:
            - any
        - id: eventName
          description: ''
          type:
            - string
  - uid: utilities.EventGroup.off
    name: 'off(target, eventName, callback, options)'
    fullName: 'off(target, eventName, callback, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        off(target?: any, eventName?: string, callback?: (args?: any) => void, options?: boolean |
        AddEventListenerOptions): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: target
          description: ''
          type:
            - any
        - id: eventName
          description: ''
          type:
            - string
        - id: callback
          description: ''
          type:
            - '(args?: any) => void'
        - id: options
          description: ''
          type:
            - boolean | AddEventListenerOptions
  - uid: utilities.EventGroup.on
    summary: >-
      On the target, attach an event whose handler will be called in the context of the parent of this instance of
      EventGroup.
    name: 'on(target, eventName, callback, options)'
    fullName: 'on(target, eventName, callback, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        on(target: any, eventName: string, callback: (args?: any) => void, options?: boolean | AddEventListenerOptions):
        void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: target
          description: ''
          type:
            - any
        - id: eventName
          description: ''
          type:
            - string
        - id: callback
          description: ''
          type:
            - '(args?: any) => void'
        - id: options
          description: ''
          type:
            - boolean | AddEventListenerOptions
  - uid: utilities.EventGroup.onAll
    summary: 'On the target, attach a set of events, where the events object is a name to function mapping.'
    name: 'onAll(target, events, useCapture)'
    fullName: 'onAll(target, events, useCapture)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        onAll(target: any, events: {
                [key: string]: (args?: any) => void;
            }, useCapture?: boolean): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: target
          description: ''
          type:
            - any
        - id: events
          description: ''
          type:
            - |-
              {
                      [key: string]: (args?: any) => void;
                  }
        - id: useCapture
          description: ''
          type:
            - boolean
  - uid: utilities.EventGroup.raise
    summary: >-
      For IE8, bubbleEvent is ignored here and must be dealt with by the handler. Events raised here by default have
      bubbling set to false and cancelable set to true. This applies also to built-in events being raised manually here
      on HTMLElements, which may lead to unexpected behavior if it differs from the defaults.
    name: 'raise(target, eventName, eventArgs, bubbleEvent)'
    fullName: 'raise(target, eventName, eventArgs, bubbleEvent)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static raise(target: any, eventName: string, eventArgs?: any, bubbleEvent?: boolean): boolean | undefined;'
      return:
        type:
          - boolean | undefined
        description: ''
      parameters:
        - id: target
          description: ''
          type:
            - any
        - id: eventName
          description: ''
          type:
            - string
        - id: eventArgs
          description: ''
          type:
            - any
        - id: bubbleEvent
          description: ''
          type:
            - boolean
  - uid: utilities.EventGroup.stopPropagation
    name: stopPropagation(event)
    fullName: stopPropagation(event)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static stopPropagation(event: any): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: event
          description: ''
          type:
            - any
